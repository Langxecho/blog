{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"4780801b45390c337144bd5c5fffccbe99488085","modified":1674902237530},{"_id":"source/_posts/循环结构.md","hash":"29bc451bef3a9e4e3976f4a6f1d8714171753c0b","modified":1674898334036},{"_id":"source/_posts/分支语句2switchcase结构.md","hash":"f84edd3893912f2b3948b11c63fbbe28dcce2d86","modified":1674898126172},{"_id":"source/_posts/今日建立的博客.md","hash":"1e6aa543cdd9a6fb72d4f9de3380b743ee6845e8","modified":1674896100798},{"_id":"source/_posts/数组.md","hash":"9161031735b3e8bc91f4d3b21f21ec11ac3139e7","modified":1674898228840},{"_id":"source/_posts/数组的巩固练习.md","hash":"36f53f64703068b601f1bb1453b55b97a0a7a1cd","modified":1674898258027},{"_id":"source/_posts/特殊关键字的使用break&contine.md","hash":"12f6d1e38b8ad4b9cd1b0eff6e20f0c666d01610","modified":1674898318197},{"_id":"source/_posts/程序流程控制.md","hash":"4a3feabbf9aee85b4539c67d80f9bea3ac6e45b1","modified":1674898028770},{"_id":"source/_posts/算数运算符的使用.md","hash":"455b62468b2b562bfc8b1d8d0388c36e9b42c4ba","modified":1674898285211},{"_id":"source/_posts/面向对象-java类及类的成员.md","hash":"9c55b19c0a7ff5645a2b5707c91cdf01ac978745","modified":1674898194473},{"_id":"source/_posts/面向对象2.md","hash":"a9c53234ad2e7c920347595eae802d412af12529","modified":1674898218221},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1674893964503},{"_id":"source/friends/index.md","hash":"385e49b3690088377821c0b82a91d2a290b47aad","modified":1674895802669},{"_id":"source/about/index.md","hash":"cf492f6c6e7cba1a35919cb38bdb847f40949c71","modified":1674712449142},{"_id":"source/tags/index.md","hash":"a727fda9b80e340f2052e807a56501f47888e77c","modified":1674896267969},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1674893060004},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1674893061593},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1674893060008},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1674893060009},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"53be9bba4abd5f4d28ddc8b0a913317531cc4877","modified":1674893061269},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1674893061513},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1674893061257},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1674893061264},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1674893061268},{"_id":"node_modules/hexo-theme-ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1674893061264},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1674893061595},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1674893061595},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1674893061596},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1674893061596},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1674893061597},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1674893061598},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1674893061598},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1674893061599},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1674893061599},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1674893061600},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1674893061600},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1674893061601},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1674893061601},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1674893061602},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1674893060023},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1674893060027},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1674893060031},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1674893060033},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1674893060034},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1674893060038},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1674893060038},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1674893060039},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1674893060041},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1674893060358},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1674893060358},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1674893061255},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1674893061262},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1674893060020},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1674893060021},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1674893060022},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1674893060022},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":1674893060024},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1674893060025},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1674893060026},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1674893060026},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1674893060029},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1674893060032},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1674893060032},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1674893060034},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1674893060035},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1674893060036},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1674893060035},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1674893060037},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"5c98ce5628c925fc2d755c16990ae57eb33e3469","modified":1674896828414},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1674893060045},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1674893061523},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1674893061523},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1674893060031},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1674893060014},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1674893061262},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1674893061535},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1674893060419},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1674893061269},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1674893061270},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1674893061536},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1674893061238},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1674893061271},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1674893061271},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1674893061271},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1674893061511},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1674893061273},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1674893061252},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1674893061253},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1674893060019},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1674893061253},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1674893061256},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1674893061261},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1674893061266},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1674893061254},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1674893061267},{"_id":"node_modules/hexo-theme-ayer/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1674893061257},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1674893061258},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1674893061267},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1674893061263},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1674893061251},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1674893061255},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1674893061258},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1674893061264},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1674893061252},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1674893061266},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1674893061513},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1674893061514},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1674893061514},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1674893061515},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1674893061516},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1674893061517},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1674893061532},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1674893060021},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1674893060024},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1674893060027},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1674893060028},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1674893060031},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1674893061241},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1674893060032},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1674893060033},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1674893060037},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1674893060029},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"c09ba80cfa41aaac17f0f7ff2586e73241adab20","modified":1674893060036},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1674893060039},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1674893060040},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1674893060041},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1674893060041},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1674893060042},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1674893060045},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1674893060044},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1674893060043},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1674893060043},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1674893061256},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1674893061518},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1674893061263},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1674893061520},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1674893061518},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1674893061520},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1674893061521},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1674893061521},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1674893061522},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1674893061522},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1674893061524},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1674893061524},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1674893061525},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1674893061524},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1674893061525},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1674893061526},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1674893061527},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1674893061527},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1674893061528},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1674893061528},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1674893061529},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1674893061529},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1674893061530},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1674893061531},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1674893061531},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1674893061532},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1674893061533},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1674893060028},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1674893061533},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1674893061534},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1674893060492},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1674893060855},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1674893061249},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1674893061261},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1674893060018},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1674893061546},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1674893061593},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1674893061237},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1674893061511},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1674893060981},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"7081440cfaa366cdf383cbbdf79e1b317e5c14f0","modified":1674903920220},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1674893060352},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1674893061545},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1674893061115},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1674893061223},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1674893061541},{"_id":"public/search.xml","hash":"7c13e7d2a2aad729da8ce423cc1defe6b0afdfc7","modified":1674904271492},{"_id":"public/categories/index.html","hash":"6bae37c686a465f6af7084ed70e59a230f3aaba9","modified":1674904271492},{"_id":"public/friends/index.html","hash":"2409a0837b481b5601ed7e4c21469f545527ba81","modified":1674904271492},{"_id":"public/tags/index.html","hash":"577bf368dbd38ce85e197413306ba41c8db4ebb3","modified":1674904271492},{"_id":"public/about/index.html","hash":"6d20c98be13073b13bd9f5c942f348bcc993bc3f","modified":1674904271492},{"_id":"public/archives/page/2/index.html","hash":"8f869191a1a2f4cf6416626d7a10689c1cd69c2d","modified":1674904271492},{"_id":"public/archives/2017/page/2/index.html","hash":"0a98c626ea482c1fe651563fd50b6a7c6f4afc2e","modified":1674904271492},{"_id":"public/archives/2017/05/page/2/index.html","hash":"2bc96a94c03151db3b32f5a60198ab577d8f411f","modified":1674904271492},{"_id":"public/categories/本站の有趣☞言论/index.html","hash":"d0593c0b8146b8a3d11665add4735a97549e9bbc","modified":1674904271492},{"_id":"public/categories/java/index.html","hash":"19ae951fbfb488994f310f87c17e4f565d517367","modified":1674904271492},{"_id":"public/tags/ncie/index.html","hash":"287e35a00af5287acb218de315ea70c99627deec","modified":1674904271492},{"_id":"public/tags/yoku/index.html","hash":"0af587b06a1dfc7fb5b869ea3390ef52d36f4144","modified":1674904271492},{"_id":"public/2017/05/26/hello-world/index.html","hash":"1ace133452c3ecd490c41a5b267224cb73973e3c","modified":1674904271492},{"_id":"public/2017/05/26/今日建立的博客/index.html","hash":"55e999896fd1bd443c45d6a1bba48f65cd6edec0","modified":1674904271492},{"_id":"public/2017/05/26/分支语句2switchcase结构/index.html","hash":"8341fb26507735105e7e9abeb46dc7150db26017","modified":1674904271492},{"_id":"public/2017/05/26/循环结构/index.html","hash":"efc29bd509b1f6380cd42599fa3e2f8a0d916b7c","modified":1674904271492},{"_id":"public/2017/05/26/数组/index.html","hash":"ae689c15cf823841f826f600f1fbb00049dc4ee2","modified":1674904271492},{"_id":"public/2017/05/26/数组的巩固练习/index.html","hash":"62eb13aa9c6b8688db3e9fc4893f5cc1c313d95d","modified":1674904271492},{"_id":"public/2017/05/26/特殊关键字的使用break&contine/index.html","hash":"d88b71886882114989d34e830c11a0a5e62b946d","modified":1674904271492},{"_id":"public/2017/05/26/算数运算符的使用/index.html","hash":"b70735704e48e1fc89c4c0535c7c787327eaaea4","modified":1674904271492},{"_id":"public/2017/05/26/面向对象-java类及类的成员/index.html","hash":"7c762298095d8e8a89b84d2a25f0390a6f03c091","modified":1674904271492},{"_id":"public/2017/05/26/面向对象2/index.html","hash":"ac85b265d84665cdf706f9d41b4fbe05f0b54f06","modified":1674904271492},{"_id":"public/2017/05/26/程序流程控制/index.html","hash":"a08232efb9aa1391734f36a13b17055ea22ae89d","modified":1674904271492},{"_id":"public/archives/index.html","hash":"0d8911fc32c9dfa97527bd883cab4219cd8b149c","modified":1674904271492},{"_id":"public/archives/2017/index.html","hash":"a82a768c672f1ef9f94d7be94ead0e7bffcac956","modified":1674904271492},{"_id":"public/archives/2017/05/index.html","hash":"410a02f5f0877f43c5f83610b72243377ac29560","modified":1674904271492},{"_id":"public/index.html","hash":"94efccd96d01943cb72693bc181395f47d55f542","modified":1674904271492},{"_id":"public/page/2/index.html","hash":"0dc8c495fefc342a29b152c8b68583369f63eed6","modified":1674904271492},{"_id":"public/categories/java基础/index.html","hash":"42f93199d6b99d3e8c536ae2ad076fad6d6e685a","modified":1674904271492},{"_id":"public/tags/java/index.html","hash":"52f098917ebf5e2c8b23f27a6d2b011b5ce1a1c3","modified":1674904271492},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1674904271492},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1674904271492},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1674904271492},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1674904271492},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1674904271492},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1674904271492},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1674904271492},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1674904271492},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1674904271492},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1674904271492},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1674904271492},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1674904271492},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1674904271492},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1674904271492},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1674904271492},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1674904271492},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1674904271492},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1674904271492},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1674904271492},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1674904271492},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1674904271492},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1674904271492},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1674904271492},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1674904271492},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1674904271492},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1674904271492},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1674904271492},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1674904271492},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1674904271492},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1674904271492},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1674904271492},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1674904271492},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1674904271492},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1674904271492},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1674904271492},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1674904271492},{"_id":"public/images/cover1.jpg","hash":"7081440cfaa366cdf383cbbdf79e1b317e5c14f0","modified":1674904271492},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1674904271492},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1674904271492},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1674904271492},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1674904271492},{"_id":"public/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1674904271492}],"Category":[{"name":"本站の有趣☞言论","_id":"cldfurb6900047093422sc3xt"},{"name":"java","_id":"cldfurb6c000b7093322g7k1l"},{"name":"java基础","_id":"cldfurb6d000g7093d6wffq0c"}],"Data":[],"Page":[{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2023-01-28T08:40:25.460Z","updated":"2023-01-28T08:19:24.503Z","path":"categories/index.html","comments":1,"_id":"cldfurb64000070933pym6ck1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","type":"friends","layout":"friends","_content":"\n","source":"friends/index.md","raw":"---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---\n\n","date":"2023-01-28T08:50:02.669Z","updated":"2023-01-28T08:50:02.669Z","path":"friends/index.html","comments":1,"_id":"cldfurb67000270937sdxew6n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---","date":"2023-01-28T08:57:47.969Z","updated":"2023-01-28T08:57:47.969Z","path":"tags/index.html","comments":1,"_id":"cldfurb69000570937fmfbg4r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-01-26T05:53:23.000Z","_content":"\n\n\n\n\n## 关于\n\n这个网站很简陋还没有写关于\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-01-26 13:53:23\n---\n\n\n\n\n\n## 关于\n\n这个网站很简陋还没有写关于\n","updated":"2023-01-26T05:54:09.142Z","path":"about/index.html","comments":1,"layout":"page","_id":"cldfurb6b00087093hj3c4980","content":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>这个网站很简陋还没有写关于</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>这个网站很简陋还没有写关于</p>\n"}],"Post":[{"title":"hexo介绍","date":"2017-05-26T04:12:57.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo介绍\ndate: 2017-05-26 12:12:57\ncategories: 本站の有趣☞言论\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-01-28T10:37:17.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb65000170930l1gciz4","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"jQuery对表单的操作及更多应用","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n\n\n\n\n## 今天建立了新的博客\n\n不得不说hexo真的好用,可以说对新手非常友好了,但是还有一些尚不明确,代我探索探索\n","source":"_posts/今日建立的博客.md","raw":"---\ntitle: jQuery对表单的操作及更多应用\ndate: 2017-05-26 12:12:57\ncategories: java\ntags:\n- ncie\n- yoku\n---\n\n\n\n\n\n\n\n## 今天建立了新的博客\n\n不得不说hexo真的好用,可以说对新手非常友好了,但是还有一些尚不明确,代我探索探索\n","slug":"今日建立的博客","published":1,"updated":"2023-01-28T08:55:00.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6800037093a54t8eo0","content":"<h2 id=\"今天建立了新的博客\"><a href=\"#今天建立了新的博客\" class=\"headerlink\" title=\"今天建立了新的博客\"></a>今天建立了新的博客</h2><p>不得不说hexo真的好用,可以说对新手非常友好了,但是还有一些尚不明确,代我探索探索</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"今天建立了新的博客\"><a href=\"#今天建立了新的博客\" class=\"headerlink\" title=\"今天建立了新的博客\"></a>今天建立了新的博客</h2><p>不得不说hexo真的好用,可以说对新手非常友好了,但是还有一些尚不明确,代我探索探索</p>\n"},{"title":"分支语句2switchcase结构","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n## switch-case结构\n\n![image-20221017184121486](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543383.png)\n\n![image-20221017184256181](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543794.png)\n\n如果上面的case都没有执行,那就default\n\n### 与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:\n\n![image-20221017184712683](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543278.png)\n\n输出结果为   two   three  other \n\n![image-20221017184802142](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544057.png)\n\n![image-20221017184912163](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544167.png)\n\nswitch 结构中的表达式只能是如下的六种类型之一\n\n![image-20221017185011210](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544265.png) \n\ncase之后只能声明常量,不能声明范围\n\n ![image-20221017185436123](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544029.png)\n\n像这种就是错的\n\nbreak词缀是可选的\n\ndefault相当于if,else中的else,并且位置是可选的,放哪都行,但是没有break还是会向下执行,一般就写在最后一行就行\n\n如果多个case的执行语句相同,可以进行合并\n\n![image-20221017185947105](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544274.png)\n\n其实就是相当于没写break\n\n\n\n### 试题:请输入2019年的day和month,问这是第几天\n\n![image-20221017190407826](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png)\n\n如果这么写,就冗余了\n\n解决冗余的方法:\n\n![image-20221017190628512](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544348.png)\n\n## switchcase与ifelse转换的说明\n\n- switchcase结构如果要判断的表达式太多,一般用整除的方法\n\n![image-20221017191156918](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544268.png)","source":"_posts/分支语句2switchcase结构.md","raw":"---\ntitle: 分支语句2switchcase结构\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n## switch-case结构\n\n![image-20221017184121486](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543383.png)\n\n![image-20221017184256181](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543794.png)\n\n如果上面的case都没有执行,那就default\n\n### 与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:\n\n![image-20221017184712683](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543278.png)\n\n输出结果为   two   three  other \n\n![image-20221017184802142](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544057.png)\n\n![image-20221017184912163](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544167.png)\n\nswitch 结构中的表达式只能是如下的六种类型之一\n\n![image-20221017185011210](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544265.png) \n\ncase之后只能声明常量,不能声明范围\n\n ![image-20221017185436123](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544029.png)\n\n像这种就是错的\n\nbreak词缀是可选的\n\ndefault相当于if,else中的else,并且位置是可选的,放哪都行,但是没有break还是会向下执行,一般就写在最后一行就行\n\n如果多个case的执行语句相同,可以进行合并\n\n![image-20221017185947105](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544274.png)\n\n其实就是相当于没写break\n\n\n\n### 试题:请输入2019年的day和month,问这是第几天\n\n![image-20221017190407826](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png)\n\n如果这么写,就冗余了\n\n解决冗余的方法:\n\n![image-20221017190628512](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544348.png)\n\n## switchcase与ifelse转换的说明\n\n- switchcase结构如果要判断的表达式太多,一般用整除的方法\n\n![image-20221017191156918](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544268.png)","slug":"分支语句2switchcase结构","published":1,"updated":"2023-01-28T09:28:46.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6a00067093h5eo6pva","content":"<h2 id=\"switch-case结构\"><a href=\"#switch-case结构\" class=\"headerlink\" title=\"switch-case结构\"></a>switch-case结构</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543383.png\" alt=\"image-20221017184121486\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543794.png\" alt=\"image-20221017184256181\"></p>\n<p>如果上面的case都没有执行,那就default</p>\n<h3 id=\"与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如\"><a href=\"#与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如\" class=\"headerlink\" title=\"与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:\"></a>与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543278.png\" alt=\"image-20221017184712683\"></p>\n<p>输出结果为   two   three  other </p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544057.png\" alt=\"image-20221017184802142\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544167.png\" alt=\"image-20221017184912163\"></p>\n<p>switch 结构中的表达式只能是如下的六种类型之一</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544265.png\" alt=\"image-20221017185011210\"> </p>\n<p>case之后只能声明常量,不能声明范围</p>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544029.png\" alt=\"image-20221017185436123\"></p>\n<p>像这种就是错的</p>\n<p>break词缀是可选的</p>\n<p>default相当于if,else中的else,并且位置是可选的,放哪都行,但是没有break还是会向下执行,一般就写在最后一行就行</p>\n<p>如果多个case的执行语句相同,可以进行合并</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544274.png\" alt=\"image-20221017185947105\"></p>\n<p>其实就是相当于没写break</p>\n<h3 id=\"试题-请输入2019年的day和month-问这是第几天\"><a href=\"#试题-请输入2019年的day和month-问这是第几天\" class=\"headerlink\" title=\"试题:请输入2019年的day和month,问这是第几天\"></a>试题:请输入2019年的day和month,问这是第几天</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png\" alt=\"image-20221017190407826\"></p>\n<p>如果这么写,就冗余了</p>\n<p>解决冗余的方法:</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544348.png\" alt=\"image-20221017190628512\"></p>\n<h2 id=\"switchcase与ifelse转换的说明\"><a href=\"#switchcase与ifelse转换的说明\" class=\"headerlink\" title=\"switchcase与ifelse转换的说明\"></a>switchcase与ifelse转换的说明</h2><ul>\n<li>switchcase结构如果要判断的表达式太多,一般用整除的方法</li>\n</ul>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544268.png\" alt=\"image-20221017191156918\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"switch-case结构\"><a href=\"#switch-case结构\" class=\"headerlink\" title=\"switch-case结构\"></a>switch-case结构</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543383.png\" alt=\"image-20221017184121486\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543794.png\" alt=\"image-20221017184256181\"></p>\n<p>如果上面的case都没有执行,那就default</p>\n<h3 id=\"与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如\"><a href=\"#与if-else不同-swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句-如\" class=\"headerlink\" title=\"与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:\"></a>与if else不同,swichcase结构在锁定条件之后会继续执行被满足条件的下面的语句,如:</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543278.png\" alt=\"image-20221017184712683\"></p>\n<p>输出结果为   two   three  other </p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544057.png\" alt=\"image-20221017184802142\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544167.png\" alt=\"image-20221017184912163\"></p>\n<p>switch 结构中的表达式只能是如下的六种类型之一</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544265.png\" alt=\"image-20221017185011210\"> </p>\n<p>case之后只能声明常量,不能声明范围</p>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544029.png\" alt=\"image-20221017185436123\"></p>\n<p>像这种就是错的</p>\n<p>break词缀是可选的</p>\n<p>default相当于if,else中的else,并且位置是可选的,放哪都行,但是没有break还是会向下执行,一般就写在最后一行就行</p>\n<p>如果多个case的执行语句相同,可以进行合并</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544274.png\" alt=\"image-20221017185947105\"></p>\n<p>其实就是相当于没写break</p>\n<h3 id=\"试题-请输入2019年的day和month-问这是第几天\"><a href=\"#试题-请输入2019年的day和month-问这是第几天\" class=\"headerlink\" title=\"试题:请输入2019年的day和month,问这是第几天\"></a>试题:请输入2019年的day和month,问这是第几天</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png\" alt=\"image-20221017190407826\"></p>\n<p>如果这么写,就冗余了</p>\n<p>解决冗余的方法:</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544348.png\" alt=\"image-20221017190628512\"></p>\n<h2 id=\"switchcase与ifelse转换的说明\"><a href=\"#switchcase与ifelse转换的说明\" class=\"headerlink\" title=\"switchcase与ifelse转换的说明\"></a>switchcase与ifelse转换的说明</h2><ul>\n<li>switchcase结构如果要判断的表达式太多,一般用整除的方法</li>\n</ul>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544268.png\" alt=\"image-20221017191156918\"></p>\n"},{"title":"循环语句","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n## 循环语句的基本组成\n\n![image-20221017191515128](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555466.png)\n\n## for 循环\n\n### for循环的四个要素\n\n- 初始化条件\n- 循环条件   ----->布尔类型\n- 循环体\n- 迭代条件\n\n### for循环的结构\n\n![image-20221017191909805](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555902.png)\n\n迭代条件添加多条语句用逗号,用;号会报错\n\n初始化条件就是进入for语句后先执行的语句,你也可以不填\n\nfor循环和while循环可以相互转换\n\n \n\n![image-20221017193532881](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555500.png)\n\n# while循环\n\n循环结构\n\n![image-20221019100754024](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555456.png)\n\n写while循环千万小心别丢迭代条件④,否则就会进入死循环\n\n![image-20221019101047652](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555745.png)\n\n#### for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用\n\nfor与while的区别是初始化条件部分的作用范围不同\n\n# dowhile循环\n\n![image-20221019101655308](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555434.png)\n\n先执行do内部的内容,然后再判断执行条件\n\ndo-while循环至少会进行一次循环体\n\n开发中,do和while使用多一点,do while使用较少\n\n##### 循环体中加入break即可退出循环\n\n## while (true)结构\n\n![image-20221020143005745](C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020143005745.png)\n\n用true开启循环,用break跳出循环\n\n如果是for循环,那就空着,也算默认开启状态\n\n![image-20221020143331386](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555400.png)\n\n## 嵌套循环\n\n![image-20221020163339462](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555502.png)\n\n循环内再循环\n\n内层循环结构遍历一遍,相当于外层循环体执行了一次\n\n \n\n![image-20221020164932600](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555081.png)\n\n这是一种控制行列的写法\n\n多学学人家,然后才能搞创新 ![image-20221020171137000](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555144.png)\n\n99乘法表\n\n## 多重循环\n\n","source":"_posts/循环结构.md","raw":"---\ntitle: 循环语句\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n## 循环语句的基本组成\n\n![image-20221017191515128](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555466.png)\n\n## for 循环\n\n### for循环的四个要素\n\n- 初始化条件\n- 循环条件   ----->布尔类型\n- 循环体\n- 迭代条件\n\n### for循环的结构\n\n![image-20221017191909805](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555902.png)\n\n迭代条件添加多条语句用逗号,用;号会报错\n\n初始化条件就是进入for语句后先执行的语句,你也可以不填\n\nfor循环和while循环可以相互转换\n\n \n\n![image-20221017193532881](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555500.png)\n\n# while循环\n\n循环结构\n\n![image-20221019100754024](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555456.png)\n\n写while循环千万小心别丢迭代条件④,否则就会进入死循环\n\n![image-20221019101047652](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555745.png)\n\n#### for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用\n\nfor与while的区别是初始化条件部分的作用范围不同\n\n# dowhile循环\n\n![image-20221019101655308](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555434.png)\n\n先执行do内部的内容,然后再判断执行条件\n\ndo-while循环至少会进行一次循环体\n\n开发中,do和while使用多一点,do while使用较少\n\n##### 循环体中加入break即可退出循环\n\n## while (true)结构\n\n![image-20221020143005745](C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020143005745.png)\n\n用true开启循环,用break跳出循环\n\n如果是for循环,那就空着,也算默认开启状态\n\n![image-20221020143331386](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555400.png)\n\n## 嵌套循环\n\n![image-20221020163339462](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555502.png)\n\n循环内再循环\n\n内层循环结构遍历一遍,相当于外层循环体执行了一次\n\n \n\n![image-20221020164932600](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555081.png)\n\n这是一种控制行列的写法\n\n多学学人家,然后才能搞创新 ![image-20221020171137000](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555144.png)\n\n99乘法表\n\n## 多重循环\n\n","slug":"循环结构","published":1,"updated":"2023-01-28T09:32:14.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6b0009709339j1122b","content":"<h2 id=\"循环语句的基本组成\"><a href=\"#循环语句的基本组成\" class=\"headerlink\" title=\"循环语句的基本组成\"></a>循环语句的基本组成</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555466.png\" alt=\"image-20221017191515128\"></p>\n<h2 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h2><h3 id=\"for循环的四个要素\"><a href=\"#for循环的四个要素\" class=\"headerlink\" title=\"for循环的四个要素\"></a>for循环的四个要素</h3><ul>\n<li>初始化条件</li>\n<li>循环条件   —–&gt;布尔类型</li>\n<li>循环体</li>\n<li>迭代条件</li>\n</ul>\n<h3 id=\"for循环的结构\"><a href=\"#for循环的结构\" class=\"headerlink\" title=\"for循环的结构\"></a>for循环的结构</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555902.png\" alt=\"image-20221017191909805\"></p>\n<p>迭代条件添加多条语句用逗号,用;号会报错</p>\n<p>初始化条件就是进入for语句后先执行的语句,你也可以不填</p>\n<p>for循环和while循环可以相互转换</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555500.png\" alt=\"image-20221017193532881\"></p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>循环结构</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555456.png\" alt=\"image-20221019100754024\"></p>\n<p>写while循环千万小心别丢迭代条件④,否则就会进入死循环</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555745.png\" alt=\"image-20221019101047652\"></p>\n<h4 id=\"for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用\"><a href=\"#for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用\" class=\"headerlink\" title=\"for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用\"></a>for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用</h4><p>for与while的区别是初始化条件部分的作用范围不同</p>\n<h1 id=\"dowhile循环\"><a href=\"#dowhile循环\" class=\"headerlink\" title=\"dowhile循环\"></a>dowhile循环</h1><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555434.png\" alt=\"image-20221019101655308\"></p>\n<p>先执行do内部的内容,然后再判断执行条件</p>\n<p>do-while循环至少会进行一次循环体</p>\n<p>开发中,do和while使用多一点,do while使用较少</p>\n<h5 id=\"循环体中加入break即可退出循环\"><a href=\"#循环体中加入break即可退出循环\" class=\"headerlink\" title=\"循环体中加入break即可退出循环\"></a>循环体中加入break即可退出循环</h5><h2 id=\"while-true-结构\"><a href=\"#while-true-结构\" class=\"headerlink\" title=\"while (true)结构\"></a>while (true)结构</h2><p><img src=\"C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020143005745.png\" alt=\"image-20221020143005745\"></p>\n<p>用true开启循环,用break跳出循环</p>\n<p>如果是for循环,那就空着,也算默认开启状态</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555400.png\" alt=\"image-20221020143331386\"></p>\n<h2 id=\"嵌套循环\"><a href=\"#嵌套循环\" class=\"headerlink\" title=\"嵌套循环\"></a>嵌套循环</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555502.png\" alt=\"image-20221020163339462\"></p>\n<p>循环内再循环</p>\n<p>内层循环结构遍历一遍,相当于外层循环体执行了一次</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555081.png\" alt=\"image-20221020164932600\"></p>\n<p>这是一种控制行列的写法</p>\n<p>多学学人家,然后才能搞创新 <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555144.png\" alt=\"image-20221020171137000\"></p>\n<p>99乘法表</p>\n<h2 id=\"多重循环\"><a href=\"#多重循环\" class=\"headerlink\" title=\"多重循环\"></a>多重循环</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"循环语句的基本组成\"><a href=\"#循环语句的基本组成\" class=\"headerlink\" title=\"循环语句的基本组成\"></a>循环语句的基本组成</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555466.png\" alt=\"image-20221017191515128\"></p>\n<h2 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h2><h3 id=\"for循环的四个要素\"><a href=\"#for循环的四个要素\" class=\"headerlink\" title=\"for循环的四个要素\"></a>for循环的四个要素</h3><ul>\n<li>初始化条件</li>\n<li>循环条件   —–&gt;布尔类型</li>\n<li>循环体</li>\n<li>迭代条件</li>\n</ul>\n<h3 id=\"for循环的结构\"><a href=\"#for循环的结构\" class=\"headerlink\" title=\"for循环的结构\"></a>for循环的结构</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555902.png\" alt=\"image-20221017191909805\"></p>\n<p>迭代条件添加多条语句用逗号,用;号会报错</p>\n<p>初始化条件就是进入for语句后先执行的语句,你也可以不填</p>\n<p>for循环和while循环可以相互转换</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555500.png\" alt=\"image-20221017193532881\"></p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>循环结构</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555456.png\" alt=\"image-20221019100754024\"></p>\n<p>写while循环千万小心别丢迭代条件④,否则就会进入死循环</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555745.png\" alt=\"image-20221019101047652\"></p>\n<h4 id=\"for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用\"><a href=\"#for循环里的参数只能在for循环里用-而while出了循环结构依然可以调用\" class=\"headerlink\" title=\"for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用\"></a>for循环里的参数只能在for循环里用,而while出了循环结构依然可以调用</h4><p>for与while的区别是初始化条件部分的作用范围不同</p>\n<h1 id=\"dowhile循环\"><a href=\"#dowhile循环\" class=\"headerlink\" title=\"dowhile循环\"></a>dowhile循环</h1><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555434.png\" alt=\"image-20221019101655308\"></p>\n<p>先执行do内部的内容,然后再判断执行条件</p>\n<p>do-while循环至少会进行一次循环体</p>\n<p>开发中,do和while使用多一点,do while使用较少</p>\n<h5 id=\"循环体中加入break即可退出循环\"><a href=\"#循环体中加入break即可退出循环\" class=\"headerlink\" title=\"循环体中加入break即可退出循环\"></a>循环体中加入break即可退出循环</h5><h2 id=\"while-true-结构\"><a href=\"#while-true-结构\" class=\"headerlink\" title=\"while (true)结构\"></a>while (true)结构</h2><p><img src=\"C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020143005745.png\" alt=\"image-20221020143005745\"></p>\n<p>用true开启循环,用break跳出循环</p>\n<p>如果是for循环,那就空着,也算默认开启状态</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555400.png\" alt=\"image-20221020143331386\"></p>\n<h2 id=\"嵌套循环\"><a href=\"#嵌套循环\" class=\"headerlink\" title=\"嵌套循环\"></a>嵌套循环</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555502.png\" alt=\"image-20221020163339462\"></p>\n<p>循环内再循环</p>\n<p>内层循环结构遍历一遍,相当于外层循环体执行了一次</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555081.png\" alt=\"image-20221020164932600\"></p>\n<p>这是一种控制行列的写法</p>\n<p>多学学人家,然后才能搞创新 <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555144.png\" alt=\"image-20221020171137000\"></p>\n<p>99乘法表</p>\n<h2 id=\"多重循环\"><a href=\"#多重循环\" class=\"headerlink\" title=\"多重循环\"></a>多重循环</h2>"},{"title":"数组","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n## 数组的概述\n\n**数组是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名,并通过编号的方式对这些数组进行统一管理**\n\n### 数组的常见概念\n\n- 数组名\n- 下标和索引\n- 元素\n- 数组的长度\n\n ![image-20221024195737285](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549491.png)\n\n![image-20221024195942730](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549640.png)\n\n![image-20221024200110712](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549415.png)\n\n## 一维数组\n\n #### 一维数组的6个事情\n\n![image-20221024200318391](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549766.png)\n\n### 一维数组的声明和初始化\n\nint num (初始化)\n\nnum = 0 (声明1)![image-20221024201554692](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549213.png)\n\n引用数据类型需要加new\n\n![image-20221025182712935](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549089.png)\n\n数组一旦初始化完成,就无法改变长度了\n\n## 调用数组指定位置的元素:通过角标的方式调用\n\n数组的角标是从0开始的,到长度-1结束\n\n只要不是跟数据库交互的,都是从0开始\n\n![image-20221025183924575](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549771.png)\n\n## 如何获取数组的长度\n\n![image-20221025184022419](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549230.png)\n\n## 如何遍历数组元素\n\n![image-20221025184134345](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550536.png)\n\n## 数组元素的默认初始化值\n\n![image-20221025184504536](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550632.png)\n\n整型的默认值为0\n\n浮点型的是0.0\n\n![image-20221025184757056](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550819.png)char型\\\n\n不带引号的是assic码,带的是字符\n\n布尔类型是false\n\n ### 引用数据类型的初始化值\n\nString是null(换句话说null只属于string?)并且这个null不用加引号\n\n## 内存解析的简单说明\n\n ![image-20221025191411768](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550290.png)\n\n局部变量都放在栈当中\n\n连续的数值(如数组)保存在堆当中\n\n给数组赋值就是改变了格子内的内容\n\n![image-20221026181439422](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550076.png)\n\n## 10.26号作业中产生的一些方法\n\n### 双重嵌循环\n\n![image-20221026181639825](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550182.png)\n\n### 向数组中写入多个数据\n\n![image-20221026181719267](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550384.png)\n\n### 比较数组内数据大小的方法\n\n![image-20221026181844909](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550162.png)\n\n### 数组套数组![image-20221026182017712](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550155.png)\n\n## 多维数组的使用\n\n![image-20221026182941088](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550435.png)\n\n ## 二位数组的初始化和声明\n\n![image-20221026184756118](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550742.png)\n\n你可以将其理解为表格\n\n如果是3维以上,你也可以这么理解\n\n![image-20221027160207386](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550018.png)\n\n![image-20221027160312082](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550518.png)\n\n一维的也能这样\n\n![image-20221027160433476](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550029.png)\n\n## 二维数组的调用\n\n![image-20221027160652280](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550617.png)\n\n![image-20221027160915537](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550643.png)\n\n## 获取数组的长度\n\n![image-20221027161404904](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551178.png)\n\n## 如何遍历二维数组\n\n![image-20221027161833244](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551829.png)\n\n## 二维数组的默认初始化值\n\n![image-20221030162532004](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551324.png)\n\n第一个指向的是地址值,并且有几个中括号就说明是几维的数组\n\n![image-20221030162957208](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551109.png)\n\n![image-20221030163002562](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551861.png)\n\n![image-20221030163030556](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551578.png)\n\n应为后面啥也没有,所以为空(null)\n\n![image-20221030163311033](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551171.png)\n\n### 二维数组的内存解析\n\n![image-20221030163722839](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551003.png)\n","source":"_posts/数组.md","raw":"---\ntitle: 数组\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n## 数组的概述\n\n**数组是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名,并通过编号的方式对这些数组进行统一管理**\n\n### 数组的常见概念\n\n- 数组名\n- 下标和索引\n- 元素\n- 数组的长度\n\n ![image-20221024195737285](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549491.png)\n\n![image-20221024195942730](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549640.png)\n\n![image-20221024200110712](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549415.png)\n\n## 一维数组\n\n #### 一维数组的6个事情\n\n![image-20221024200318391](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549766.png)\n\n### 一维数组的声明和初始化\n\nint num (初始化)\n\nnum = 0 (声明1)![image-20221024201554692](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549213.png)\n\n引用数据类型需要加new\n\n![image-20221025182712935](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549089.png)\n\n数组一旦初始化完成,就无法改变长度了\n\n## 调用数组指定位置的元素:通过角标的方式调用\n\n数组的角标是从0开始的,到长度-1结束\n\n只要不是跟数据库交互的,都是从0开始\n\n![image-20221025183924575](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549771.png)\n\n## 如何获取数组的长度\n\n![image-20221025184022419](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549230.png)\n\n## 如何遍历数组元素\n\n![image-20221025184134345](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550536.png)\n\n## 数组元素的默认初始化值\n\n![image-20221025184504536](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550632.png)\n\n整型的默认值为0\n\n浮点型的是0.0\n\n![image-20221025184757056](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550819.png)char型\\\n\n不带引号的是assic码,带的是字符\n\n布尔类型是false\n\n ### 引用数据类型的初始化值\n\nString是null(换句话说null只属于string?)并且这个null不用加引号\n\n## 内存解析的简单说明\n\n ![image-20221025191411768](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550290.png)\n\n局部变量都放在栈当中\n\n连续的数值(如数组)保存在堆当中\n\n给数组赋值就是改变了格子内的内容\n\n![image-20221026181439422](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550076.png)\n\n## 10.26号作业中产生的一些方法\n\n### 双重嵌循环\n\n![image-20221026181639825](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550182.png)\n\n### 向数组中写入多个数据\n\n![image-20221026181719267](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550384.png)\n\n### 比较数组内数据大小的方法\n\n![image-20221026181844909](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550162.png)\n\n### 数组套数组![image-20221026182017712](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550155.png)\n\n## 多维数组的使用\n\n![image-20221026182941088](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550435.png)\n\n ## 二位数组的初始化和声明\n\n![image-20221026184756118](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550742.png)\n\n你可以将其理解为表格\n\n如果是3维以上,你也可以这么理解\n\n![image-20221027160207386](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550018.png)\n\n![image-20221027160312082](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550518.png)\n\n一维的也能这样\n\n![image-20221027160433476](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550029.png)\n\n## 二维数组的调用\n\n![image-20221027160652280](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550617.png)\n\n![image-20221027160915537](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550643.png)\n\n## 获取数组的长度\n\n![image-20221027161404904](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551178.png)\n\n## 如何遍历二维数组\n\n![image-20221027161833244](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551829.png)\n\n## 二维数组的默认初始化值\n\n![image-20221030162532004](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551324.png)\n\n第一个指向的是地址值,并且有几个中括号就说明是几维的数组\n\n![image-20221030162957208](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551109.png)\n\n![image-20221030163002562](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551861.png)\n\n![image-20221030163030556](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551578.png)\n\n应为后面啥也没有,所以为空(null)\n\n![image-20221030163311033](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551171.png)\n\n### 二维数组的内存解析\n\n![image-20221030163722839](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551003.png)\n","slug":"数组","published":1,"updated":"2023-01-28T09:30:28.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6b000a70934hlj4wgm","content":"<h2 id=\"数组的概述\"><a href=\"#数组的概述\" class=\"headerlink\" title=\"数组的概述\"></a>数组的概述</h2><p><strong>数组是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名,并通过编号的方式对这些数组进行统一管理</strong></p>\n<h3 id=\"数组的常见概念\"><a href=\"#数组的常见概念\" class=\"headerlink\" title=\"数组的常见概念\"></a>数组的常见概念</h3><ul>\n<li>数组名</li>\n<li>下标和索引</li>\n<li>元素</li>\n<li>数组的长度</li>\n</ul>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549491.png\" alt=\"image-20221024195737285\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549640.png\" alt=\"image-20221024195942730\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549415.png\" alt=\"image-20221024200110712\"></p>\n<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h4 id=\"一维数组的6个事情\"><a href=\"#一维数组的6个事情\" class=\"headerlink\" title=\"一维数组的6个事情\"></a>一维数组的6个事情</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549766.png\" alt=\"image-20221024200318391\"></p>\n<h3 id=\"一维数组的声明和初始化\"><a href=\"#一维数组的声明和初始化\" class=\"headerlink\" title=\"一维数组的声明和初始化\"></a>一维数组的声明和初始化</h3><p>int num (初始化)</p>\n<p>num = 0 (声明1)<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549213.png\" alt=\"image-20221024201554692\"></p>\n<p>引用数据类型需要加new</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549089.png\" alt=\"image-20221025182712935\"></p>\n<p>数组一旦初始化完成,就无法改变长度了</p>\n<h2 id=\"调用数组指定位置的元素-通过角标的方式调用\"><a href=\"#调用数组指定位置的元素-通过角标的方式调用\" class=\"headerlink\" title=\"调用数组指定位置的元素:通过角标的方式调用\"></a>调用数组指定位置的元素:通过角标的方式调用</h2><p>数组的角标是从0开始的,到长度-1结束</p>\n<p>只要不是跟数据库交互的,都是从0开始</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549771.png\" alt=\"image-20221025183924575\"></p>\n<h2 id=\"如何获取数组的长度\"><a href=\"#如何获取数组的长度\" class=\"headerlink\" title=\"如何获取数组的长度\"></a>如何获取数组的长度</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549230.png\" alt=\"image-20221025184022419\"></p>\n<h2 id=\"如何遍历数组元素\"><a href=\"#如何遍历数组元素\" class=\"headerlink\" title=\"如何遍历数组元素\"></a>如何遍历数组元素</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550536.png\" alt=\"image-20221025184134345\"></p>\n<h2 id=\"数组元素的默认初始化值\"><a href=\"#数组元素的默认初始化值\" class=\"headerlink\" title=\"数组元素的默认初始化值\"></a>数组元素的默认初始化值</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550632.png\" alt=\"image-20221025184504536\"></p>\n<p>整型的默认值为0</p>\n<p>浮点型的是0.0</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550819.png\" alt=\"image-20221025184757056\">char型\\</p>\n<p>不带引号的是assic码,带的是字符</p>\n<p>布尔类型是false</p>\n<h3 id=\"引用数据类型的初始化值\"><a href=\"#引用数据类型的初始化值\" class=\"headerlink\" title=\"引用数据类型的初始化值\"></a>引用数据类型的初始化值</h3><p>String是null(换句话说null只属于string?)并且这个null不用加引号</p>\n<h2 id=\"内存解析的简单说明\"><a href=\"#内存解析的简单说明\" class=\"headerlink\" title=\"内存解析的简单说明\"></a>内存解析的简单说明</h2><p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550290.png\" alt=\"image-20221025191411768\"></p>\n<p>局部变量都放在栈当中</p>\n<p>连续的数值(如数组)保存在堆当中</p>\n<p>给数组赋值就是改变了格子内的内容</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550076.png\" alt=\"image-20221026181439422\"></p>\n<h2 id=\"10-26号作业中产生的一些方法\"><a href=\"#10-26号作业中产生的一些方法\" class=\"headerlink\" title=\"10.26号作业中产生的一些方法\"></a>10.26号作业中产生的一些方法</h2><h3 id=\"双重嵌循环\"><a href=\"#双重嵌循环\" class=\"headerlink\" title=\"双重嵌循环\"></a>双重嵌循环</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550182.png\" alt=\"image-20221026181639825\"></p>\n<h3 id=\"向数组中写入多个数据\"><a href=\"#向数组中写入多个数据\" class=\"headerlink\" title=\"向数组中写入多个数据\"></a>向数组中写入多个数据</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550384.png\" alt=\"image-20221026181719267\"></p>\n<h3 id=\"比较数组内数据大小的方法\"><a href=\"#比较数组内数据大小的方法\" class=\"headerlink\" title=\"比较数组内数据大小的方法\"></a>比较数组内数据大小的方法</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550162.png\" alt=\"image-20221026181844909\"></p>\n<h3 id=\"数组套数组\"><a href=\"#数组套数组\" class=\"headerlink\" title=\"数组套数组\"></a>数组套数组<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550155.png\" alt=\"image-20221026182017712\"></h3><h2 id=\"多维数组的使用\"><a href=\"#多维数组的使用\" class=\"headerlink\" title=\"多维数组的使用\"></a>多维数组的使用</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550435.png\" alt=\"image-20221026182941088\"></p>\n<h2 id=\"二位数组的初始化和声明\"><a href=\"#二位数组的初始化和声明\" class=\"headerlink\" title=\"二位数组的初始化和声明\"></a>二位数组的初始化和声明</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550742.png\" alt=\"image-20221026184756118\"></p>\n<p>你可以将其理解为表格</p>\n<p>如果是3维以上,你也可以这么理解</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550018.png\" alt=\"image-20221027160207386\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550518.png\" alt=\"image-20221027160312082\"></p>\n<p>一维的也能这样</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550029.png\" alt=\"image-20221027160433476\"></p>\n<h2 id=\"二维数组的调用\"><a href=\"#二维数组的调用\" class=\"headerlink\" title=\"二维数组的调用\"></a>二维数组的调用</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550617.png\" alt=\"image-20221027160652280\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550643.png\" alt=\"image-20221027160915537\"></p>\n<h2 id=\"获取数组的长度\"><a href=\"#获取数组的长度\" class=\"headerlink\" title=\"获取数组的长度\"></a>获取数组的长度</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551178.png\" alt=\"image-20221027161404904\"></p>\n<h2 id=\"如何遍历二维数组\"><a href=\"#如何遍历二维数组\" class=\"headerlink\" title=\"如何遍历二维数组\"></a>如何遍历二维数组</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551829.png\" alt=\"image-20221027161833244\"></p>\n<h2 id=\"二维数组的默认初始化值\"><a href=\"#二维数组的默认初始化值\" class=\"headerlink\" title=\"二维数组的默认初始化值\"></a>二维数组的默认初始化值</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551324.png\" alt=\"image-20221030162532004\"></p>\n<p>第一个指向的是地址值,并且有几个中括号就说明是几维的数组</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551109.png\" alt=\"image-20221030162957208\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551861.png\" alt=\"image-20221030163002562\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551578.png\" alt=\"image-20221030163030556\"></p>\n<p>应为后面啥也没有,所以为空(null)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551171.png\" alt=\"image-20221030163311033\"></p>\n<h3 id=\"二维数组的内存解析\"><a href=\"#二维数组的内存解析\" class=\"headerlink\" title=\"二维数组的内存解析\"></a>二维数组的内存解析</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551003.png\" alt=\"image-20221030163722839\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组的概述\"><a href=\"#数组的概述\" class=\"headerlink\" title=\"数组的概述\"></a>数组的概述</h2><p><strong>数组是多个相同类型数据按一定顺序排列的集合,并使用一个名字命名,并通过编号的方式对这些数组进行统一管理</strong></p>\n<h3 id=\"数组的常见概念\"><a href=\"#数组的常见概念\" class=\"headerlink\" title=\"数组的常见概念\"></a>数组的常见概念</h3><ul>\n<li>数组名</li>\n<li>下标和索引</li>\n<li>元素</li>\n<li>数组的长度</li>\n</ul>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549491.png\" alt=\"image-20221024195737285\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549640.png\" alt=\"image-20221024195942730\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549415.png\" alt=\"image-20221024200110712\"></p>\n<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h4 id=\"一维数组的6个事情\"><a href=\"#一维数组的6个事情\" class=\"headerlink\" title=\"一维数组的6个事情\"></a>一维数组的6个事情</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549766.png\" alt=\"image-20221024200318391\"></p>\n<h3 id=\"一维数组的声明和初始化\"><a href=\"#一维数组的声明和初始化\" class=\"headerlink\" title=\"一维数组的声明和初始化\"></a>一维数组的声明和初始化</h3><p>int num (初始化)</p>\n<p>num = 0 (声明1)<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549213.png\" alt=\"image-20221024201554692\"></p>\n<p>引用数据类型需要加new</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549089.png\" alt=\"image-20221025182712935\"></p>\n<p>数组一旦初始化完成,就无法改变长度了</p>\n<h2 id=\"调用数组指定位置的元素-通过角标的方式调用\"><a href=\"#调用数组指定位置的元素-通过角标的方式调用\" class=\"headerlink\" title=\"调用数组指定位置的元素:通过角标的方式调用\"></a>调用数组指定位置的元素:通过角标的方式调用</h2><p>数组的角标是从0开始的,到长度-1结束</p>\n<p>只要不是跟数据库交互的,都是从0开始</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549771.png\" alt=\"image-20221025183924575\"></p>\n<h2 id=\"如何获取数组的长度\"><a href=\"#如何获取数组的长度\" class=\"headerlink\" title=\"如何获取数组的长度\"></a>如何获取数组的长度</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549230.png\" alt=\"image-20221025184022419\"></p>\n<h2 id=\"如何遍历数组元素\"><a href=\"#如何遍历数组元素\" class=\"headerlink\" title=\"如何遍历数组元素\"></a>如何遍历数组元素</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550536.png\" alt=\"image-20221025184134345\"></p>\n<h2 id=\"数组元素的默认初始化值\"><a href=\"#数组元素的默认初始化值\" class=\"headerlink\" title=\"数组元素的默认初始化值\"></a>数组元素的默认初始化值</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550632.png\" alt=\"image-20221025184504536\"></p>\n<p>整型的默认值为0</p>\n<p>浮点型的是0.0</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550819.png\" alt=\"image-20221025184757056\">char型\\</p>\n<p>不带引号的是assic码,带的是字符</p>\n<p>布尔类型是false</p>\n<h3 id=\"引用数据类型的初始化值\"><a href=\"#引用数据类型的初始化值\" class=\"headerlink\" title=\"引用数据类型的初始化值\"></a>引用数据类型的初始化值</h3><p>String是null(换句话说null只属于string?)并且这个null不用加引号</p>\n<h2 id=\"内存解析的简单说明\"><a href=\"#内存解析的简单说明\" class=\"headerlink\" title=\"内存解析的简单说明\"></a>内存解析的简单说明</h2><p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550290.png\" alt=\"image-20221025191411768\"></p>\n<p>局部变量都放在栈当中</p>\n<p>连续的数值(如数组)保存在堆当中</p>\n<p>给数组赋值就是改变了格子内的内容</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550076.png\" alt=\"image-20221026181439422\"></p>\n<h2 id=\"10-26号作业中产生的一些方法\"><a href=\"#10-26号作业中产生的一些方法\" class=\"headerlink\" title=\"10.26号作业中产生的一些方法\"></a>10.26号作业中产生的一些方法</h2><h3 id=\"双重嵌循环\"><a href=\"#双重嵌循环\" class=\"headerlink\" title=\"双重嵌循环\"></a>双重嵌循环</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550182.png\" alt=\"image-20221026181639825\"></p>\n<h3 id=\"向数组中写入多个数据\"><a href=\"#向数组中写入多个数据\" class=\"headerlink\" title=\"向数组中写入多个数据\"></a>向数组中写入多个数据</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550384.png\" alt=\"image-20221026181719267\"></p>\n<h3 id=\"比较数组内数据大小的方法\"><a href=\"#比较数组内数据大小的方法\" class=\"headerlink\" title=\"比较数组内数据大小的方法\"></a>比较数组内数据大小的方法</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550162.png\" alt=\"image-20221026181844909\"></p>\n<h3 id=\"数组套数组\"><a href=\"#数组套数组\" class=\"headerlink\" title=\"数组套数组\"></a>数组套数组<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550155.png\" alt=\"image-20221026182017712\"></h3><h2 id=\"多维数组的使用\"><a href=\"#多维数组的使用\" class=\"headerlink\" title=\"多维数组的使用\"></a>多维数组的使用</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550435.png\" alt=\"image-20221026182941088\"></p>\n<h2 id=\"二位数组的初始化和声明\"><a href=\"#二位数组的初始化和声明\" class=\"headerlink\" title=\"二位数组的初始化和声明\"></a>二位数组的初始化和声明</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550742.png\" alt=\"image-20221026184756118\"></p>\n<p>你可以将其理解为表格</p>\n<p>如果是3维以上,你也可以这么理解</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550018.png\" alt=\"image-20221027160207386\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550518.png\" alt=\"image-20221027160312082\"></p>\n<p>一维的也能这样</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550029.png\" alt=\"image-20221027160433476\"></p>\n<h2 id=\"二维数组的调用\"><a href=\"#二维数组的调用\" class=\"headerlink\" title=\"二维数组的调用\"></a>二维数组的调用</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550617.png\" alt=\"image-20221027160652280\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281550643.png\" alt=\"image-20221027160915537\"></p>\n<h2 id=\"获取数组的长度\"><a href=\"#获取数组的长度\" class=\"headerlink\" title=\"获取数组的长度\"></a>获取数组的长度</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551178.png\" alt=\"image-20221027161404904\"></p>\n<h2 id=\"如何遍历二维数组\"><a href=\"#如何遍历二维数组\" class=\"headerlink\" title=\"如何遍历二维数组\"></a>如何遍历二维数组</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551829.png\" alt=\"image-20221027161833244\"></p>\n<h2 id=\"二维数组的默认初始化值\"><a href=\"#二维数组的默认初始化值\" class=\"headerlink\" title=\"二维数组的默认初始化值\"></a>二维数组的默认初始化值</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551324.png\" alt=\"image-20221030162532004\"></p>\n<p>第一个指向的是地址值,并且有几个中括号就说明是几维的数组</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551109.png\" alt=\"image-20221030162957208\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551861.png\" alt=\"image-20221030163002562\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551578.png\" alt=\"image-20221030163030556\"></p>\n<p>应为后面啥也没有,所以为空(null)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551171.png\" alt=\"image-20221030163311033\"></p>\n<h3 id=\"二维数组的内存解析\"><a href=\"#二维数组的内存解析\" class=\"headerlink\" title=\"二维数组的内存解析\"></a>二维数组的内存解析</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551003.png\" alt=\"image-20221030163722839\"></p>\n"},{"title":"数组的巩固练习","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n![image-20221030170258216](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551240.png)\n\n这里的x是一维数组,y是二维数组,并且![image-20221030170447869](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551053.png)是给x和y分别赋值\n\n### 杨辉三角\n\n\n\n![image-20221030170758474](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551519.png)\n\n![image-20221031104530699](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551485.png)\n\n![image-20221031104547297](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551702.png)\n\n## 数组的常见算法\n\n![image-20221031105743708](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552340.png)\n\n随机数公式![image-20221102100629389](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552030.png)\n\n![image-20221109103525941](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552108.png)\n\n数组的复制\n\n![image-20221102102000513](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552508.png)数组的复制,循环和查找\n\n![image-20221102102221947](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552831.png)\n\n中间变量法,首尾交换法\n\n![image-20221102102528555](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552441.png)\n\n二分法查找算法\n\n![image-20221102110340769](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552529.png)\n\n![image-20221102110402722](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552899.png)\n\n### 排序算法:冒泡排序\n\n![image-20221107201532147](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552809.png)\n\n#### 快速排序\n\n![image-20221107202127692](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552365.png)\n\nArrays工具类的使用\n\n![image-20221109101026041](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552856.png)\n\n![image-20221109101111754](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552701.png)\n\n![image-20221109101305988](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552317.png)\n\n![image-20221109101415211](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552573.png)\n\n(fill是将数组值全部修改为设定值)\n\n![image-20221109101525045](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552938.png)\n\n![image-20221109101603129](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552456.png)\n\n(这个只能查找已经排序的数组)\n\n### 数组编写的常见错误\n\n![image-20221109101852664](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552999.png)\n\n![image-20221109101921930](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553269.png)\n\n(空指针异常)\n\n![image-20221109102028987](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553652.png)\n\n![image-20221109102110239](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553838.png)\n\n![image-20221109102147626](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553301.png)\n","source":"_posts/数组的巩固练习.md","raw":"---\ntitle: 数组的巩固练习\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n![image-20221030170258216](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551240.png)\n\n这里的x是一维数组,y是二维数组,并且![image-20221030170447869](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551053.png)是给x和y分别赋值\n\n### 杨辉三角\n\n\n\n![image-20221030170758474](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551519.png)\n\n![image-20221031104530699](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551485.png)\n\n![image-20221031104547297](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551702.png)\n\n## 数组的常见算法\n\n![image-20221031105743708](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552340.png)\n\n随机数公式![image-20221102100629389](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552030.png)\n\n![image-20221109103525941](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552108.png)\n\n数组的复制\n\n![image-20221102102000513](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552508.png)数组的复制,循环和查找\n\n![image-20221102102221947](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552831.png)\n\n中间变量法,首尾交换法\n\n![image-20221102102528555](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552441.png)\n\n二分法查找算法\n\n![image-20221102110340769](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552529.png)\n\n![image-20221102110402722](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552899.png)\n\n### 排序算法:冒泡排序\n\n![image-20221107201532147](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552809.png)\n\n#### 快速排序\n\n![image-20221107202127692](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552365.png)\n\nArrays工具类的使用\n\n![image-20221109101026041](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552856.png)\n\n![image-20221109101111754](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552701.png)\n\n![image-20221109101305988](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552317.png)\n\n![image-20221109101415211](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552573.png)\n\n(fill是将数组值全部修改为设定值)\n\n![image-20221109101525045](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552938.png)\n\n![image-20221109101603129](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552456.png)\n\n(这个只能查找已经排序的数组)\n\n### 数组编写的常见错误\n\n![image-20221109101852664](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552999.png)\n\n![image-20221109101921930](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553269.png)\n\n(空指针异常)\n\n![image-20221109102028987](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553652.png)\n\n![image-20221109102110239](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553838.png)\n\n![image-20221109102147626](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553301.png)\n","slug":"数组的巩固练习","published":1,"updated":"2023-01-28T09:30:58.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6c000c70931mlk1dkv","content":"<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551240.png\" alt=\"image-20221030170258216\"></p>\n<p>这里的x是一维数组,y是二维数组,并且<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551053.png\" alt=\"image-20221030170447869\">是给x和y分别赋值</p>\n<h3 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551519.png\" alt=\"image-20221030170758474\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551485.png\" alt=\"image-20221031104530699\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551702.png\" alt=\"image-20221031104547297\"></p>\n<h2 id=\"数组的常见算法\"><a href=\"#数组的常见算法\" class=\"headerlink\" title=\"数组的常见算法\"></a>数组的常见算法</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552340.png\" alt=\"image-20221031105743708\"></p>\n<p>随机数公式<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552030.png\" alt=\"image-20221102100629389\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552108.png\" alt=\"image-20221109103525941\"></p>\n<p>数组的复制</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552508.png\" alt=\"image-20221102102000513\">数组的复制,循环和查找</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552831.png\" alt=\"image-20221102102221947\"></p>\n<p>中间变量法,首尾交换法</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552441.png\" alt=\"image-20221102102528555\"></p>\n<p>二分法查找算法</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552529.png\" alt=\"image-20221102110340769\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552899.png\" alt=\"image-20221102110402722\"></p>\n<h3 id=\"排序算法-冒泡排序\"><a href=\"#排序算法-冒泡排序\" class=\"headerlink\" title=\"排序算法:冒泡排序\"></a>排序算法:冒泡排序</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552809.png\" alt=\"image-20221107201532147\"></p>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552365.png\" alt=\"image-20221107202127692\"></p>\n<p>Arrays工具类的使用</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552856.png\" alt=\"image-20221109101026041\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552701.png\" alt=\"image-20221109101111754\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552317.png\" alt=\"image-20221109101305988\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552573.png\" alt=\"image-20221109101415211\"></p>\n<p>(fill是将数组值全部修改为设定值)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552938.png\" alt=\"image-20221109101525045\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552456.png\" alt=\"image-20221109101603129\"></p>\n<p>(这个只能查找已经排序的数组)</p>\n<h3 id=\"数组编写的常见错误\"><a href=\"#数组编写的常见错误\" class=\"headerlink\" title=\"数组编写的常见错误\"></a>数组编写的常见错误</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552999.png\" alt=\"image-20221109101852664\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553269.png\" alt=\"image-20221109101921930\"></p>\n<p>(空指针异常)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553652.png\" alt=\"image-20221109102028987\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553838.png\" alt=\"image-20221109102110239\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553301.png\" alt=\"image-20221109102147626\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551240.png\" alt=\"image-20221030170258216\"></p>\n<p>这里的x是一维数组,y是二维数组,并且<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551053.png\" alt=\"image-20221030170447869\">是给x和y分别赋值</p>\n<h3 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551519.png\" alt=\"image-20221030170758474\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551485.png\" alt=\"image-20221031104530699\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281551702.png\" alt=\"image-20221031104547297\"></p>\n<h2 id=\"数组的常见算法\"><a href=\"#数组的常见算法\" class=\"headerlink\" title=\"数组的常见算法\"></a>数组的常见算法</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552340.png\" alt=\"image-20221031105743708\"></p>\n<p>随机数公式<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552030.png\" alt=\"image-20221102100629389\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552108.png\" alt=\"image-20221109103525941\"></p>\n<p>数组的复制</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552508.png\" alt=\"image-20221102102000513\">数组的复制,循环和查找</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552831.png\" alt=\"image-20221102102221947\"></p>\n<p>中间变量法,首尾交换法</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552441.png\" alt=\"image-20221102102528555\"></p>\n<p>二分法查找算法</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552529.png\" alt=\"image-20221102110340769\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552899.png\" alt=\"image-20221102110402722\"></p>\n<h3 id=\"排序算法-冒泡排序\"><a href=\"#排序算法-冒泡排序\" class=\"headerlink\" title=\"排序算法:冒泡排序\"></a>排序算法:冒泡排序</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552809.png\" alt=\"image-20221107201532147\"></p>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552365.png\" alt=\"image-20221107202127692\"></p>\n<p>Arrays工具类的使用</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552856.png\" alt=\"image-20221109101026041\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552701.png\" alt=\"image-20221109101111754\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552317.png\" alt=\"image-20221109101305988\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552573.png\" alt=\"image-20221109101415211\"></p>\n<p>(fill是将数组值全部修改为设定值)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552938.png\" alt=\"image-20221109101525045\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552456.png\" alt=\"image-20221109101603129\"></p>\n<p>(这个只能查找已经排序的数组)</p>\n<h3 id=\"数组编写的常见错误\"><a href=\"#数组编写的常见错误\" class=\"headerlink\" title=\"数组编写的常见错误\"></a>数组编写的常见错误</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281552999.png\" alt=\"image-20221109101852664\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553269.png\" alt=\"image-20221109101921930\"></p>\n<p>(空指针异常)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553652.png\" alt=\"image-20221109102028987\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553838.png\" alt=\"image-20221109102110239\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553301.png\" alt=\"image-20221109102147626\"></p>\n"},{"title":"特殊关键词的使用(break与continue)","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n## 特殊关键字的使用(break与continue)\n\n  ![image-20221022134051259](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555945.png)\n\n 注意,这两个关键字如果后面不可以声明语句,会报错,所以只能用这两个语句结尾\n\n 并且是默认跳出包裹此关键字最近的for循环\n\n 但是可以用标签来指定\n\n![image-20221022135007927](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555312.png)\n\nreturn语句\n\n![image-20221022135206533](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555465.png)","source":"_posts/特殊关键字的使用break&contine.md","raw":"---\ntitle: 特殊关键词的使用(break与continue)\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n## 特殊关键字的使用(break与continue)\n\n  ![image-20221022134051259](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555945.png)\n\n 注意,这两个关键字如果后面不可以声明语句,会报错,所以只能用这两个语句结尾\n\n 并且是默认跳出包裹此关键字最近的for循环\n\n 但是可以用标签来指定\n\n![image-20221022135007927](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555312.png)\n\nreturn语句\n\n![image-20221022135206533](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555465.png)","slug":"特殊关键字的使用break&contine","published":1,"updated":"2023-01-28T09:31:58.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6d000e7093aprq4sbr","content":"<h2 id=\"特殊关键字的使用-break与continue\"><a href=\"#特殊关键字的使用-break与continue\" class=\"headerlink\" title=\"特殊关键字的使用(break与continue)\"></a>特殊关键字的使用(break与continue)</h2><p>  <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555945.png\" alt=\"image-20221022134051259\"></p>\n<p> 注意,这两个关键字如果后面不可以声明语句,会报错,所以只能用这两个语句结尾</p>\n<p> 并且是默认跳出包裹此关键字最近的for循环</p>\n<p> 但是可以用标签来指定</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555312.png\" alt=\"image-20221022135007927\"></p>\n<p>return语句</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555465.png\" alt=\"image-20221022135206533\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"特殊关键字的使用-break与continue\"><a href=\"#特殊关键字的使用-break与continue\" class=\"headerlink\" title=\"特殊关键字的使用(break与continue)\"></a>特殊关键字的使用(break与continue)</h2><p>  <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555945.png\" alt=\"image-20221022134051259\"></p>\n<p> 注意,这两个关键字如果后面不可以声明语句,会报错,所以只能用这两个语句结尾</p>\n<p> 并且是默认跳出包裹此关键字最近的for循环</p>\n<p> 但是可以用标签来指定</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555312.png\" alt=\"image-20221022135007927\"></p>\n<p>return语句</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555465.png\" alt=\"image-20221022135206533\"></p>\n"},{"title":"算数运算符的使用","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n## 算数运算符\n\n![image-20221012101401291](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553513.png)\n\n### 符号运算的注意点\n\n![image-20221012102808342](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553366.png)\n\n所以说提升运算与强制转换运算十分重要\n\n![image-20221012103238704](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553100.png)最终被模数的符号和去出来的余是一样的\n\n开发中经常用%来判断能否被整除![image-20221012103738982](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554441.png)![image-20221012104035454](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554172.png)\n\n自增是在表明的变量上加1\n\n前自增先自增后赋值\n\n后自增先赋值后自增\n\n自增一不会改变自身变量的类型\n\n## 赋值运算符\n\n![image-20221012111406124](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554391.png)![image-20221012111541561](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554595.png)![image-20221012111653469](C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221012111653469.png)\n\n注意,这里的等号是赋值,+=可以理解为赋值＋2\n\n一样的还有-=   %=\n\n这种写法不会改变变量本身的数据类型\n\n用定义的话会自动提升\n\n比如\n\n```javascript\nshort s = 10\nshort a = s+1\n//因为1是整形\n//所以a会变成int值从而导致出错\n如果用++就没问题\n```\n\n## 比较运算符\n\n![image-20221012134612382](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554917.png)\n\n注意,输出的结果都是布尔类型\n\n注意=与==号的区别\n\n## 逻辑运算符\n\n\n\n![image-20221012140310668](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554936.png)\n\n#### 逻辑和短路的区别\n\n逻辑前后都会执行,而短路如果前面的条件已经判定不会执行了,那么后面的程序也不会执行了\n\n![image-20221012192114465](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554730.png)\n\n ![image-20221012192236261](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554716.png)\n\n    ## 位运算符\n\n![image-20221012193101596](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554250.png)\n\n ![image-20221012193045786](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554602.png)\n\n#### 这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15 \n\n \n\n### 交换两个变量的值\n\n![image-20221012193955300](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554934.png)\n\n![image-20221012194006274](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554429.png)\n\n## 三元运算符\n\n![image-20221012194255682](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554853.png)\n\n![image-20221014075825076](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554226.png)\n\n![image-20221014075949565](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555850.png)\n\n不相同的类型可以统一为一个结果 ,表达式1和表达式2必须是一致的![image-20221014080441296](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png)\n\n凡是可以使用三元运算符的地方都可以使用if,else结构\n\n如果两种结构都可以使用,那么优先选择三元运算符,因为他简洁又高效\n\n## 运算符的优先级\n\n![image-20221014081357625](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png)\n\n看似复杂,实际使用中只要用好小括号就行","source":"_posts/算数运算符的使用.md","raw":"---\ntitle: 算数运算符的使用\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n## 算数运算符\n\n![image-20221012101401291](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553513.png)\n\n### 符号运算的注意点\n\n![image-20221012102808342](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553366.png)\n\n所以说提升运算与强制转换运算十分重要\n\n![image-20221012103238704](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553100.png)最终被模数的符号和去出来的余是一样的\n\n开发中经常用%来判断能否被整除![image-20221012103738982](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554441.png)![image-20221012104035454](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554172.png)\n\n自增是在表明的变量上加1\n\n前自增先自增后赋值\n\n后自增先赋值后自增\n\n自增一不会改变自身变量的类型\n\n## 赋值运算符\n\n![image-20221012111406124](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554391.png)![image-20221012111541561](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554595.png)![image-20221012111653469](C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221012111653469.png)\n\n注意,这里的等号是赋值,+=可以理解为赋值＋2\n\n一样的还有-=   %=\n\n这种写法不会改变变量本身的数据类型\n\n用定义的话会自动提升\n\n比如\n\n```javascript\nshort s = 10\nshort a = s+1\n//因为1是整形\n//所以a会变成int值从而导致出错\n如果用++就没问题\n```\n\n## 比较运算符\n\n![image-20221012134612382](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554917.png)\n\n注意,输出的结果都是布尔类型\n\n注意=与==号的区别\n\n## 逻辑运算符\n\n\n\n![image-20221012140310668](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554936.png)\n\n#### 逻辑和短路的区别\n\n逻辑前后都会执行,而短路如果前面的条件已经判定不会执行了,那么后面的程序也不会执行了\n\n![image-20221012192114465](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554730.png)\n\n ![image-20221012192236261](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554716.png)\n\n    ## 位运算符\n\n![image-20221012193101596](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554250.png)\n\n ![image-20221012193045786](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554602.png)\n\n#### 这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15 \n\n \n\n### 交换两个变量的值\n\n![image-20221012193955300](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554934.png)\n\n![image-20221012194006274](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554429.png)\n\n## 三元运算符\n\n![image-20221012194255682](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554853.png)\n\n![image-20221014075825076](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554226.png)\n\n![image-20221014075949565](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555850.png)\n\n不相同的类型可以统一为一个结果 ,表达式1和表达式2必须是一致的![image-20221014080441296](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png)\n\n凡是可以使用三元运算符的地方都可以使用if,else结构\n\n如果两种结构都可以使用,那么优先选择三元运算符,因为他简洁又高效\n\n## 运算符的优先级\n\n![image-20221014081357625](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png)\n\n看似复杂,实际使用中只要用好小括号就行","slug":"算数运算符的使用","published":1,"updated":"2023-01-28T09:31:25.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6d000h709334ndazk9","content":"<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553513.png\" alt=\"image-20221012101401291\"></p>\n<h3 id=\"符号运算的注意点\"><a href=\"#符号运算的注意点\" class=\"headerlink\" title=\"符号运算的注意点\"></a>符号运算的注意点</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553366.png\" alt=\"image-20221012102808342\"></p>\n<p>所以说提升运算与强制转换运算十分重要</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553100.png\" alt=\"image-20221012103238704\">最终被模数的符号和去出来的余是一样的</p>\n<p>开发中经常用%来判断能否被整除<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554441.png\" alt=\"image-20221012103738982\"><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554172.png\" alt=\"image-20221012104035454\"></p>\n<p>自增是在表明的变量上加1</p>\n<p>前自增先自增后赋值</p>\n<p>后自增先赋值后自增</p>\n<p>自增一不会改变自身变量的类型</p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554391.png\" alt=\"image-20221012111406124\"><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554595.png\" alt=\"image-20221012111541561\"><img src=\"C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221012111653469.png\" alt=\"image-20221012111653469\"></p>\n<p>注意,这里的等号是赋值,+=可以理解为赋值＋2</p>\n<p>一样的还有-=   %=</p>\n<p>这种写法不会改变变量本身的数据类型</p>\n<p>用定义的话会自动提升</p>\n<p>比如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">short s = <span class=\"number\">10</span></span><br><span class=\"line\">short a = s+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//因为1是整形</span></span><br><span class=\"line\"><span class=\"comment\">//所以a会变成int值从而导致出错</span></span><br><span class=\"line\">如果用++就没问题</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554917.png\" alt=\"image-20221012134612382\"></p>\n<p>注意,输出的结果都是布尔类型</p>\n<p>注意=与==号的区别</p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554936.png\" alt=\"image-20221012140310668\"></p>\n<h4 id=\"逻辑和短路的区别\"><a href=\"#逻辑和短路的区别\" class=\"headerlink\" title=\"逻辑和短路的区别\"></a>逻辑和短路的区别</h4><p>逻辑前后都会执行,而短路如果前面的条件已经判定不会执行了,那么后面的程序也不会执行了</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554730.png\" alt=\"image-20221012192114465\"></p>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554716.png\" alt=\"image-20221012192236261\"></p>\n<pre><code>## 位运算符\n</code></pre>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554250.png\" alt=\"image-20221012193101596\"></p>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554602.png\" alt=\"image-20221012193045786\"></p>\n<h4 id=\"这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15\"><a href=\"#这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15\" class=\"headerlink\" title=\"这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15\"></a>这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15</h4><h3 id=\"交换两个变量的值\"><a href=\"#交换两个变量的值\" class=\"headerlink\" title=\"交换两个变量的值\"></a>交换两个变量的值</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554934.png\" alt=\"image-20221012193955300\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554429.png\" alt=\"image-20221012194006274\"></p>\n<h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554853.png\" alt=\"image-20221012194255682\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554226.png\" alt=\"image-20221014075825076\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555850.png\" alt=\"image-20221014075949565\"></p>\n<p>不相同的类型可以统一为一个结果 ,表达式1和表达式2必须是一致的<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png\" alt=\"image-20221014080441296\"></p>\n<p>凡是可以使用三元运算符的地方都可以使用if,else结构</p>\n<p>如果两种结构都可以使用,那么优先选择三元运算符,因为他简洁又高效</p>\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png\" alt=\"image-20221014081357625\"></p>\n<p>看似复杂,实际使用中只要用好小括号就行</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553513.png\" alt=\"image-20221012101401291\"></p>\n<h3 id=\"符号运算的注意点\"><a href=\"#符号运算的注意点\" class=\"headerlink\" title=\"符号运算的注意点\"></a>符号运算的注意点</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553366.png\" alt=\"image-20221012102808342\"></p>\n<p>所以说提升运算与强制转换运算十分重要</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281553100.png\" alt=\"image-20221012103238704\">最终被模数的符号和去出来的余是一样的</p>\n<p>开发中经常用%来判断能否被整除<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554441.png\" alt=\"image-20221012103738982\"><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554172.png\" alt=\"image-20221012104035454\"></p>\n<p>自增是在表明的变量上加1</p>\n<p>前自增先自增后赋值</p>\n<p>后自增先赋值后自增</p>\n<p>自增一不会改变自身变量的类型</p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554391.png\" alt=\"image-20221012111406124\"><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554595.png\" alt=\"image-20221012111541561\"><img src=\"C:\\Users\\ECHO\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221012111653469.png\" alt=\"image-20221012111653469\"></p>\n<p>注意,这里的等号是赋值,+=可以理解为赋值＋2</p>\n<p>一样的还有-=   %=</p>\n<p>这种写法不会改变变量本身的数据类型</p>\n<p>用定义的话会自动提升</p>\n<p>比如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">short s = <span class=\"number\">10</span></span><br><span class=\"line\">short a = s+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//因为1是整形</span></span><br><span class=\"line\"><span class=\"comment\">//所以a会变成int值从而导致出错</span></span><br><span class=\"line\">如果用++就没问题</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554917.png\" alt=\"image-20221012134612382\"></p>\n<p>注意,输出的结果都是布尔类型</p>\n<p>注意=与==号的区别</p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554936.png\" alt=\"image-20221012140310668\"></p>\n<h4 id=\"逻辑和短路的区别\"><a href=\"#逻辑和短路的区别\" class=\"headerlink\" title=\"逻辑和短路的区别\"></a>逻辑和短路的区别</h4><p>逻辑前后都会执行,而短路如果前面的条件已经判定不会执行了,那么后面的程序也不会执行了</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554730.png\" alt=\"image-20221012192114465\"></p>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554716.png\" alt=\"image-20221012192236261\"></p>\n<pre><code>## 位运算符\n</code></pre>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554250.png\" alt=\"image-20221012193101596\"></p>\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554602.png\" alt=\"image-20221012193045786\"></p>\n<h4 id=\"这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15\"><a href=\"#这个用的比较少-为了加速学习这里不做详细说明-详情参考-day03-15\" class=\"headerlink\" title=\"这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15\"></a>这个用的比较少,为了加速学习这里不做详细说明,详情参考 day03  15</h4><h3 id=\"交换两个变量的值\"><a href=\"#交换两个变量的值\" class=\"headerlink\" title=\"交换两个变量的值\"></a>交换两个变量的值</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554934.png\" alt=\"image-20221012193955300\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554429.png\" alt=\"image-20221012194006274\"></p>\n<h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554853.png\" alt=\"image-20221012194255682\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281554226.png\" alt=\"image-20221014075825076\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555850.png\" alt=\"image-20221014075949565\"></p>\n<p>不相同的类型可以统一为一个结果 ,表达式1和表达式2必须是一致的<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png\" alt=\"image-20221014080441296\"></p>\n<p>凡是可以使用三元运算符的地方都可以使用if,else结构</p>\n<p>如果两种结构都可以使用,那么优先选择三元运算符,因为他简洁又高效</p>\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281555129.png\" alt=\"image-20221014081357625\"></p>\n<p>看似复杂,实际使用中只要用好小括号就行</p>\n"},{"title":"面向对象-java类以及类的成员","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n### java类以及类的成员:属性,方法,构造器;代码块,内部类\n\n![image-20221110162529295](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544484.png)\n\n## 面向过程与面向对象\n\n![image-20221110164953202](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png)\n\n![image-20221110165951763](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544854.png)\n\n![image-20221110170031878](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544863.png)\n\n### java语言的基本元素:类与对象\n\n![image-20221110170335418](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545183.png)\n\n![image-20221110170559944](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545291.png)\n\n![image-20221110170706319](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545069.png)\n\n### 类的结构:属性与方法\n\n![image-20221110171238179](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545680.png)\n\n![image-20221113151740802](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545651.png) \n\n![image-20221113151947760](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545813.png)\n\n## 创建类的对象\n\n\n\n![image-20221113152239822](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545767.png)\n\n```java\nperson p = new person;\n//创建类的对象=类的实例化=实例化类\n//调用对象的结构:属性,方法\n//调用属性:\"对象.属性\"\n```\n\n![image-20221113152826043](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545640.png)\n\n![image-20221113153114797](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545636.png)\n\n```\np1成为了类的实例,并且属性就是成员变量\n```\n\n![image-20221113160220957](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546891.png)\n\n#### 如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性\n\n\n\n![image-20221113161151863](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546429.png)\n\n地址值是相同的,至于为什么 p3=p1,大概是因为类型是相同的所以省略了后缀吧\n\n## 对象的内存解析\n\n ![image-20221113161354349](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546055.png)\n\n这是对象的具体内存结构\n\n![image-20221113161824120](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546399.png)\n\n## 属性与局部变量的对比\n\n![image-20221113164125220](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546783.png)\n\n属性可以声明权限\n\n![image-20221113164142504](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546408.png)\n\n其实就是变量一类的东西放的位置不同,他的功能也就不同,\n\n![image-20221113164403247](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546928.png)\n\n局部变量在调用时都必须赋值\n\n形参在调用时赋值即可\n\n### 局部变量与属性加载的位置不同\n\n![image-20221113193414879](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546212.png)\n\n## 方法举例与格式的说明\n\n![image-20221115163831432](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546559.png)\n\n```\nvoid表示没有返回值\n有string的表示返回值为string\n()内写的是形参\n\n```\n\n ![image-20221115164258700](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546229.png)\n\n![image-20221115164343471](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546343.png)\n\n### 方法的声明\n\n```\n权限修饰符 返回值类型 方法名(形参列表){方法体}\n```\n\n![image-20221115164555548](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546716.png)\n\n#### 权限修饰符\n\n```\nprivate.public,缺省,protected--封装性再细说,默认都先使用public\n```\n\n#### 返回值类型\n\n```\n如果有返回值,必须在方法声明时,指定返回值的类型.同时方法中需要使用return来返回指定类型的变量或者常量\n```\n\n![image-20221115165041333](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546529.png)\n\n第一个时变量,第二个是常量\n\n每一个可以输出的地方或者结果的地方都需要返回值\n\n```\n如果方法没有返回值,则在方法声明时,使用void来表示,通常情况下不用return,但是可以使用return;来结束此方法\nreturn后不可以声明表达式\n \n```\n\n### 小结1\n\n![image-20221115165652260](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546640.png)\n\n![image-20221115165702139](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546009.png)\n\n### 方法名\n\n```\n方法名属于标识符,要使用规范,遵循所见即所得原则\n\n```\n\n### 形参列表\n\n```\n可以声明一个或多个形参\n格式 :数据类型 形参,数据类型 形参.....\n只声明不赋值\n```\n\n![image-20221116101717887](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547054.png)\n\n![image-20221116101841712](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547407.png)\n\n### 一些注意点\n\n类内部的方法可以调用类的属性\n\n方法内部可以调用方法\n\n递归就是方法自己调用自己\n\n方法中不能定义方法\n\n### 传输接受与返回\n\n![image-20221117101910110](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547610.png)\n\n多理解理解\n\n当然如果没有返回那直接写个sout也可以\n\n#### 传参数的问题\n\n![image-20221117102137790](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547934.png)\n\n![image-20221117102144642](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547451.png)\n\n```java\n如果方法会调用类的属性,那么修改类,也可以更改参数\n\n如果用形参,传入数据,也是修改参数的一种方法\n\n但是这两种方法一旦弄混了,那就会出现各种奇怪的bug\n```\n\n### 对象与static的错误\n\n![image-20221117102529665](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547872.png)\n\n如果你建方法时不用static,那么就必须造一个对象去调用,否则会出错,这里涉及到的点之后回去详细说明\n\n### 关于方法声明的一些练习\n\n![image-20221117145702406](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547085.png)\n\n![image-20221117145749766](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547737.png)\n\n如果直接调用method方法,那么就必须把static给补上\n\n![image-20221117150418016](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547102.png)\n\n先强化造对象的过程再说别的\n\n![image-20221117150645874](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547778.png)\n\n虽然说里边是个方法,但是实际上返回值是变量,也就是最终结果是变量,所以可以放\n\n### 属性与形参\n\n![image-20221117152023865](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547084.png)\n\n这个代码已经说明的很清楚了\n\n![image-20221117152148621](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547621.png)\n\n形参的调用\n\n### 重点好题⭐\n\n![image-20221117152920791](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547603.png)\n\n![image-20221117153215395](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547877.png)\n\n**也就是说,数组里面啥都能装,可以装数字型,也能把对象给装进去.**\n\n![image-20221117154558648](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547890.png)\n\n换句话说这个数组的类是student类,的\n\n具体原理参见柞与堆\n\n![image-20221117153528207](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547105.png)\n\n![image-20221117153642066](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547563.png)\n\n还可以利用类里面的方法进行编辑\n\n![image-20221117154213954](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547499.png)\n\n数组之间的使用必须是同类型的.\n\n","source":"_posts/面向对象-java类及类的成员.md","raw":"---\ntitle: 面向对象-java类以及类的成员\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n### java类以及类的成员:属性,方法,构造器;代码块,内部类\n\n![image-20221110162529295](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544484.png)\n\n## 面向过程与面向对象\n\n![image-20221110164953202](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png)\n\n![image-20221110165951763](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544854.png)\n\n![image-20221110170031878](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544863.png)\n\n### java语言的基本元素:类与对象\n\n![image-20221110170335418](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545183.png)\n\n![image-20221110170559944](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545291.png)\n\n![image-20221110170706319](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545069.png)\n\n### 类的结构:属性与方法\n\n![image-20221110171238179](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545680.png)\n\n![image-20221113151740802](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545651.png) \n\n![image-20221113151947760](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545813.png)\n\n## 创建类的对象\n\n\n\n![image-20221113152239822](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545767.png)\n\n```java\nperson p = new person;\n//创建类的对象=类的实例化=实例化类\n//调用对象的结构:属性,方法\n//调用属性:\"对象.属性\"\n```\n\n![image-20221113152826043](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545640.png)\n\n![image-20221113153114797](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545636.png)\n\n```\np1成为了类的实例,并且属性就是成员变量\n```\n\n![image-20221113160220957](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546891.png)\n\n#### 如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性\n\n\n\n![image-20221113161151863](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546429.png)\n\n地址值是相同的,至于为什么 p3=p1,大概是因为类型是相同的所以省略了后缀吧\n\n## 对象的内存解析\n\n ![image-20221113161354349](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546055.png)\n\n这是对象的具体内存结构\n\n![image-20221113161824120](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546399.png)\n\n## 属性与局部变量的对比\n\n![image-20221113164125220](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546783.png)\n\n属性可以声明权限\n\n![image-20221113164142504](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546408.png)\n\n其实就是变量一类的东西放的位置不同,他的功能也就不同,\n\n![image-20221113164403247](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546928.png)\n\n局部变量在调用时都必须赋值\n\n形参在调用时赋值即可\n\n### 局部变量与属性加载的位置不同\n\n![image-20221113193414879](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546212.png)\n\n## 方法举例与格式的说明\n\n![image-20221115163831432](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546559.png)\n\n```\nvoid表示没有返回值\n有string的表示返回值为string\n()内写的是形参\n\n```\n\n ![image-20221115164258700](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546229.png)\n\n![image-20221115164343471](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546343.png)\n\n### 方法的声明\n\n```\n权限修饰符 返回值类型 方法名(形参列表){方法体}\n```\n\n![image-20221115164555548](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546716.png)\n\n#### 权限修饰符\n\n```\nprivate.public,缺省,protected--封装性再细说,默认都先使用public\n```\n\n#### 返回值类型\n\n```\n如果有返回值,必须在方法声明时,指定返回值的类型.同时方法中需要使用return来返回指定类型的变量或者常量\n```\n\n![image-20221115165041333](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546529.png)\n\n第一个时变量,第二个是常量\n\n每一个可以输出的地方或者结果的地方都需要返回值\n\n```\n如果方法没有返回值,则在方法声明时,使用void来表示,通常情况下不用return,但是可以使用return;来结束此方法\nreturn后不可以声明表达式\n \n```\n\n### 小结1\n\n![image-20221115165652260](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546640.png)\n\n![image-20221115165702139](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546009.png)\n\n### 方法名\n\n```\n方法名属于标识符,要使用规范,遵循所见即所得原则\n\n```\n\n### 形参列表\n\n```\n可以声明一个或多个形参\n格式 :数据类型 形参,数据类型 形参.....\n只声明不赋值\n```\n\n![image-20221116101717887](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547054.png)\n\n![image-20221116101841712](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547407.png)\n\n### 一些注意点\n\n类内部的方法可以调用类的属性\n\n方法内部可以调用方法\n\n递归就是方法自己调用自己\n\n方法中不能定义方法\n\n### 传输接受与返回\n\n![image-20221117101910110](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547610.png)\n\n多理解理解\n\n当然如果没有返回那直接写个sout也可以\n\n#### 传参数的问题\n\n![image-20221117102137790](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547934.png)\n\n![image-20221117102144642](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547451.png)\n\n```java\n如果方法会调用类的属性,那么修改类,也可以更改参数\n\n如果用形参,传入数据,也是修改参数的一种方法\n\n但是这两种方法一旦弄混了,那就会出现各种奇怪的bug\n```\n\n### 对象与static的错误\n\n![image-20221117102529665](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547872.png)\n\n如果你建方法时不用static,那么就必须造一个对象去调用,否则会出错,这里涉及到的点之后回去详细说明\n\n### 关于方法声明的一些练习\n\n![image-20221117145702406](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547085.png)\n\n![image-20221117145749766](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547737.png)\n\n如果直接调用method方法,那么就必须把static给补上\n\n![image-20221117150418016](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547102.png)\n\n先强化造对象的过程再说别的\n\n![image-20221117150645874](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547778.png)\n\n虽然说里边是个方法,但是实际上返回值是变量,也就是最终结果是变量,所以可以放\n\n### 属性与形参\n\n![image-20221117152023865](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547084.png)\n\n这个代码已经说明的很清楚了\n\n![image-20221117152148621](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547621.png)\n\n形参的调用\n\n### 重点好题⭐\n\n![image-20221117152920791](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547603.png)\n\n![image-20221117153215395](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547877.png)\n\n**也就是说,数组里面啥都能装,可以装数字型,也能把对象给装进去.**\n\n![image-20221117154558648](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547890.png)\n\n换句话说这个数组的类是student类,的\n\n具体原理参见柞与堆\n\n![image-20221117153528207](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547105.png)\n\n![image-20221117153642066](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547563.png)\n\n还可以利用类里面的方法进行编辑\n\n![image-20221117154213954](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547499.png)\n\n数组之间的使用必须是同类型的.\n\n","slug":"面向对象-java类及类的成员","published":1,"updated":"2023-01-28T09:29:54.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6e000j7093afjwg55c","content":"<h3 id=\"java类以及类的成员-属性-方法-构造器-代码块-内部类\"><a href=\"#java类以及类的成员-属性-方法-构造器-代码块-内部类\" class=\"headerlink\" title=\"java类以及类的成员:属性,方法,构造器;代码块,内部类\"></a>java类以及类的成员:属性,方法,构造器;代码块,内部类</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544484.png\" alt=\"image-20221110162529295\"></p>\n<h2 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png\" alt=\"image-20221110164953202\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544854.png\" alt=\"image-20221110165951763\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544863.png\" alt=\"image-20221110170031878\"></p>\n<h3 id=\"java语言的基本元素-类与对象\"><a href=\"#java语言的基本元素-类与对象\" class=\"headerlink\" title=\"java语言的基本元素:类与对象\"></a>java语言的基本元素:类与对象</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545183.png\" alt=\"image-20221110170335418\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545291.png\" alt=\"image-20221110170559944\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545069.png\" alt=\"image-20221110170706319\"></p>\n<h3 id=\"类的结构-属性与方法\"><a href=\"#类的结构-属性与方法\" class=\"headerlink\" title=\"类的结构:属性与方法\"></a>类的结构:属性与方法</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545680.png\" alt=\"image-20221110171238179\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545651.png\" alt=\"image-20221113151740802\"> </p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545813.png\" alt=\"image-20221113151947760\"></p>\n<h2 id=\"创建类的对象\"><a href=\"#创建类的对象\" class=\"headerlink\" title=\"创建类的对象\"></a>创建类的对象</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545767.png\" alt=\"image-20221113152239822\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">person</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建类的对象=类的实例化=实例化类</span></span><br><span class=\"line\"><span class=\"comment\">//调用对象的结构:属性,方法</span></span><br><span class=\"line\"><span class=\"comment\">//调用属性:&quot;对象.属性&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545640.png\" alt=\"image-20221113152826043\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545636.png\" alt=\"image-20221113153114797\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1成为了类的实例,并且属性就是成员变量</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546891.png\" alt=\"image-20221113160220957\"></p>\n<h4 id=\"如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性\"><a href=\"#如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性\" class=\"headerlink\" title=\"如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性\"></a>如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546429.png\" alt=\"image-20221113161151863\"></p>\n<p>地址值是相同的,至于为什么 p3=p1,大概是因为类型是相同的所以省略了后缀吧</p>\n<h2 id=\"对象的内存解析\"><a href=\"#对象的内存解析\" class=\"headerlink\" title=\"对象的内存解析\"></a>对象的内存解析</h2><p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546055.png\" alt=\"image-20221113161354349\"></p>\n<p>这是对象的具体内存结构</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546399.png\" alt=\"image-20221113161824120\"></p>\n<h2 id=\"属性与局部变量的对比\"><a href=\"#属性与局部变量的对比\" class=\"headerlink\" title=\"属性与局部变量的对比\"></a>属性与局部变量的对比</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546783.png\" alt=\"image-20221113164125220\"></p>\n<p>属性可以声明权限</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546408.png\" alt=\"image-20221113164142504\"></p>\n<p>其实就是变量一类的东西放的位置不同,他的功能也就不同,</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546928.png\" alt=\"image-20221113164403247\"></p>\n<p>局部变量在调用时都必须赋值</p>\n<p>形参在调用时赋值即可</p>\n<h3 id=\"局部变量与属性加载的位置不同\"><a href=\"#局部变量与属性加载的位置不同\" class=\"headerlink\" title=\"局部变量与属性加载的位置不同\"></a>局部变量与属性加载的位置不同</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546212.png\" alt=\"image-20221113193414879\"></p>\n<h2 id=\"方法举例与格式的说明\"><a href=\"#方法举例与格式的说明\" class=\"headerlink\" title=\"方法举例与格式的说明\"></a>方法举例与格式的说明</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546559.png\" alt=\"image-20221115163831432\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void表示没有返回值</span><br><span class=\"line\">有string的表示返回值为string</span><br><span class=\"line\">()内写的是形参</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546229.png\" alt=\"image-20221115164258700\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546343.png\" alt=\"image-20221115164343471\"></p>\n<h3 id=\"方法的声明\"><a href=\"#方法的声明\" class=\"headerlink\" title=\"方法的声明\"></a>方法的声明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546716.png\" alt=\"image-20221115164555548\"></p>\n<h4 id=\"权限修饰符\"><a href=\"#权限修饰符\" class=\"headerlink\" title=\"权限修饰符\"></a>权限修饰符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private.public,缺省,protected--封装性再细说,默认都先使用public</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回值类型\"><a href=\"#返回值类型\" class=\"headerlink\" title=\"返回值类型\"></a>返回值类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有返回值,必须在方法声明时,指定返回值的类型.同时方法中需要使用return来返回指定类型的变量或者常量</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546529.png\" alt=\"image-20221115165041333\"></p>\n<p>第一个时变量,第二个是常量</p>\n<p>每一个可以输出的地方或者结果的地方都需要返回值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果方法没有返回值,则在方法声明时,使用void来表示,通常情况下不用return,但是可以使用return;来结束此方法</span><br><span class=\"line\">return后不可以声明表达式</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结1\"><a href=\"#小结1\" class=\"headerlink\" title=\"小结1\"></a>小结1</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546640.png\" alt=\"image-20221115165652260\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546009.png\" alt=\"image-20221115165702139\"></p>\n<h3 id=\"方法名\"><a href=\"#方法名\" class=\"headerlink\" title=\"方法名\"></a>方法名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法名属于标识符,要使用规范,遵循所见即所得原则</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"形参列表\"><a href=\"#形参列表\" class=\"headerlink\" title=\"形参列表\"></a>形参列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以声明一个或多个形参</span><br><span class=\"line\">格式 :数据类型 形参,数据类型 形参.....</span><br><span class=\"line\">只声明不赋值</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547054.png\" alt=\"image-20221116101717887\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547407.png\" alt=\"image-20221116101841712\"></p>\n<h3 id=\"一些注意点\"><a href=\"#一些注意点\" class=\"headerlink\" title=\"一些注意点\"></a>一些注意点</h3><p>类内部的方法可以调用类的属性</p>\n<p>方法内部可以调用方法</p>\n<p>递归就是方法自己调用自己</p>\n<p>方法中不能定义方法</p>\n<h3 id=\"传输接受与返回\"><a href=\"#传输接受与返回\" class=\"headerlink\" title=\"传输接受与返回\"></a>传输接受与返回</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547610.png\" alt=\"image-20221117101910110\"></p>\n<p>多理解理解</p>\n<p>当然如果没有返回那直接写个sout也可以</p>\n<h4 id=\"传参数的问题\"><a href=\"#传参数的问题\" class=\"headerlink\" title=\"传参数的问题\"></a>传参数的问题</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547934.png\" alt=\"image-20221117102137790\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547451.png\" alt=\"image-20221117102144642\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果方法会调用类的属性,那么修改类,也可以更改参数</span><br><span class=\"line\"></span><br><span class=\"line\">如果用形参,传入数据,也是修改参数的一种方法</span><br><span class=\"line\"></span><br><span class=\"line\">但是这两种方法一旦弄混了,那就会出现各种奇怪的bug</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象与static的错误\"><a href=\"#对象与static的错误\" class=\"headerlink\" title=\"对象与static的错误\"></a>对象与static的错误</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547872.png\" alt=\"image-20221117102529665\"></p>\n<p>如果你建方法时不用static,那么就必须造一个对象去调用,否则会出错,这里涉及到的点之后回去详细说明</p>\n<h3 id=\"关于方法声明的一些练习\"><a href=\"#关于方法声明的一些练习\" class=\"headerlink\" title=\"关于方法声明的一些练习\"></a>关于方法声明的一些练习</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547085.png\" alt=\"image-20221117145702406\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547737.png\" alt=\"image-20221117145749766\"></p>\n<p>如果直接调用method方法,那么就必须把static给补上</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547102.png\" alt=\"image-20221117150418016\"></p>\n<p>先强化造对象的过程再说别的</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547778.png\" alt=\"image-20221117150645874\"></p>\n<p>虽然说里边是个方法,但是实际上返回值是变量,也就是最终结果是变量,所以可以放</p>\n<h3 id=\"属性与形参\"><a href=\"#属性与形参\" class=\"headerlink\" title=\"属性与形参\"></a>属性与形参</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547084.png\" alt=\"image-20221117152023865\"></p>\n<p>这个代码已经说明的很清楚了</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547621.png\" alt=\"image-20221117152148621\"></p>\n<p>形参的调用</p>\n<h3 id=\"重点好题⭐\"><a href=\"#重点好题⭐\" class=\"headerlink\" title=\"重点好题⭐\"></a>重点好题⭐</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547603.png\" alt=\"image-20221117152920791\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547877.png\" alt=\"image-20221117153215395\"></p>\n<p><strong>也就是说,数组里面啥都能装,可以装数字型,也能把对象给装进去.</strong></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547890.png\" alt=\"image-20221117154558648\"></p>\n<p>换句话说这个数组的类是student类,的</p>\n<p>具体原理参见柞与堆</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547105.png\" alt=\"image-20221117153528207\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547563.png\" alt=\"image-20221117153642066\"></p>\n<p>还可以利用类里面的方法进行编辑</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547499.png\" alt=\"image-20221117154213954\"></p>\n<p>数组之间的使用必须是同类型的.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"java类以及类的成员-属性-方法-构造器-代码块-内部类\"><a href=\"#java类以及类的成员-属性-方法-构造器-代码块-内部类\" class=\"headerlink\" title=\"java类以及类的成员:属性,方法,构造器;代码块,内部类\"></a>java类以及类的成员:属性,方法,构造器;代码块,内部类</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544484.png\" alt=\"image-20221110162529295\"></p>\n<h2 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544177.png\" alt=\"image-20221110164953202\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544854.png\" alt=\"image-20221110165951763\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281544863.png\" alt=\"image-20221110170031878\"></p>\n<h3 id=\"java语言的基本元素-类与对象\"><a href=\"#java语言的基本元素-类与对象\" class=\"headerlink\" title=\"java语言的基本元素:类与对象\"></a>java语言的基本元素:类与对象</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545183.png\" alt=\"image-20221110170335418\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545291.png\" alt=\"image-20221110170559944\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545069.png\" alt=\"image-20221110170706319\"></p>\n<h3 id=\"类的结构-属性与方法\"><a href=\"#类的结构-属性与方法\" class=\"headerlink\" title=\"类的结构:属性与方法\"></a>类的结构:属性与方法</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545680.png\" alt=\"image-20221110171238179\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545651.png\" alt=\"image-20221113151740802\"> </p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545813.png\" alt=\"image-20221113151947760\"></p>\n<h2 id=\"创建类的对象\"><a href=\"#创建类的对象\" class=\"headerlink\" title=\"创建类的对象\"></a>创建类的对象</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545767.png\" alt=\"image-20221113152239822\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">person</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建类的对象=类的实例化=实例化类</span></span><br><span class=\"line\"><span class=\"comment\">//调用对象的结构:属性,方法</span></span><br><span class=\"line\"><span class=\"comment\">//调用属性:&quot;对象.属性&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545640.png\" alt=\"image-20221113152826043\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281545636.png\" alt=\"image-20221113153114797\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1成为了类的实例,并且属性就是成员变量</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546891.png\" alt=\"image-20221113160220957\"></p>\n<h4 id=\"如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性\"><a href=\"#如果创建了一个类的多个对象-那么每个对象都独立的拥有一套类的属性\" class=\"headerlink\" title=\"如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性\"></a>如果创建了一个类的多个对象,那么每个对象都独立的拥有一套类的属性</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546429.png\" alt=\"image-20221113161151863\"></p>\n<p>地址值是相同的,至于为什么 p3=p1,大概是因为类型是相同的所以省略了后缀吧</p>\n<h2 id=\"对象的内存解析\"><a href=\"#对象的内存解析\" class=\"headerlink\" title=\"对象的内存解析\"></a>对象的内存解析</h2><p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546055.png\" alt=\"image-20221113161354349\"></p>\n<p>这是对象的具体内存结构</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546399.png\" alt=\"image-20221113161824120\"></p>\n<h2 id=\"属性与局部变量的对比\"><a href=\"#属性与局部变量的对比\" class=\"headerlink\" title=\"属性与局部变量的对比\"></a>属性与局部变量的对比</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546783.png\" alt=\"image-20221113164125220\"></p>\n<p>属性可以声明权限</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546408.png\" alt=\"image-20221113164142504\"></p>\n<p>其实就是变量一类的东西放的位置不同,他的功能也就不同,</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546928.png\" alt=\"image-20221113164403247\"></p>\n<p>局部变量在调用时都必须赋值</p>\n<p>形参在调用时赋值即可</p>\n<h3 id=\"局部变量与属性加载的位置不同\"><a href=\"#局部变量与属性加载的位置不同\" class=\"headerlink\" title=\"局部变量与属性加载的位置不同\"></a>局部变量与属性加载的位置不同</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546212.png\" alt=\"image-20221113193414879\"></p>\n<h2 id=\"方法举例与格式的说明\"><a href=\"#方法举例与格式的说明\" class=\"headerlink\" title=\"方法举例与格式的说明\"></a>方法举例与格式的说明</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546559.png\" alt=\"image-20221115163831432\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void表示没有返回值</span><br><span class=\"line\">有string的表示返回值为string</span><br><span class=\"line\">()内写的是形参</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546229.png\" alt=\"image-20221115164258700\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546343.png\" alt=\"image-20221115164343471\"></p>\n<h3 id=\"方法的声明\"><a href=\"#方法的声明\" class=\"headerlink\" title=\"方法的声明\"></a>方法的声明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546716.png\" alt=\"image-20221115164555548\"></p>\n<h4 id=\"权限修饰符\"><a href=\"#权限修饰符\" class=\"headerlink\" title=\"权限修饰符\"></a>权限修饰符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private.public,缺省,protected--封装性再细说,默认都先使用public</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回值类型\"><a href=\"#返回值类型\" class=\"headerlink\" title=\"返回值类型\"></a>返回值类型</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有返回值,必须在方法声明时,指定返回值的类型.同时方法中需要使用return来返回指定类型的变量或者常量</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546529.png\" alt=\"image-20221115165041333\"></p>\n<p>第一个时变量,第二个是常量</p>\n<p>每一个可以输出的地方或者结果的地方都需要返回值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果方法没有返回值,则在方法声明时,使用void来表示,通常情况下不用return,但是可以使用return;来结束此方法</span><br><span class=\"line\">return后不可以声明表达式</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结1\"><a href=\"#小结1\" class=\"headerlink\" title=\"小结1\"></a>小结1</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546640.png\" alt=\"image-20221115165652260\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281546009.png\" alt=\"image-20221115165702139\"></p>\n<h3 id=\"方法名\"><a href=\"#方法名\" class=\"headerlink\" title=\"方法名\"></a>方法名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法名属于标识符,要使用规范,遵循所见即所得原则</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"形参列表\"><a href=\"#形参列表\" class=\"headerlink\" title=\"形参列表\"></a>形参列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以声明一个或多个形参</span><br><span class=\"line\">格式 :数据类型 形参,数据类型 形参.....</span><br><span class=\"line\">只声明不赋值</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547054.png\" alt=\"image-20221116101717887\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547407.png\" alt=\"image-20221116101841712\"></p>\n<h3 id=\"一些注意点\"><a href=\"#一些注意点\" class=\"headerlink\" title=\"一些注意点\"></a>一些注意点</h3><p>类内部的方法可以调用类的属性</p>\n<p>方法内部可以调用方法</p>\n<p>递归就是方法自己调用自己</p>\n<p>方法中不能定义方法</p>\n<h3 id=\"传输接受与返回\"><a href=\"#传输接受与返回\" class=\"headerlink\" title=\"传输接受与返回\"></a>传输接受与返回</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547610.png\" alt=\"image-20221117101910110\"></p>\n<p>多理解理解</p>\n<p>当然如果没有返回那直接写个sout也可以</p>\n<h4 id=\"传参数的问题\"><a href=\"#传参数的问题\" class=\"headerlink\" title=\"传参数的问题\"></a>传参数的问题</h4><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547934.png\" alt=\"image-20221117102137790\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547451.png\" alt=\"image-20221117102144642\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果方法会调用类的属性,那么修改类,也可以更改参数</span><br><span class=\"line\"></span><br><span class=\"line\">如果用形参,传入数据,也是修改参数的一种方法</span><br><span class=\"line\"></span><br><span class=\"line\">但是这两种方法一旦弄混了,那就会出现各种奇怪的bug</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象与static的错误\"><a href=\"#对象与static的错误\" class=\"headerlink\" title=\"对象与static的错误\"></a>对象与static的错误</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547872.png\" alt=\"image-20221117102529665\"></p>\n<p>如果你建方法时不用static,那么就必须造一个对象去调用,否则会出错,这里涉及到的点之后回去详细说明</p>\n<h3 id=\"关于方法声明的一些练习\"><a href=\"#关于方法声明的一些练习\" class=\"headerlink\" title=\"关于方法声明的一些练习\"></a>关于方法声明的一些练习</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547085.png\" alt=\"image-20221117145702406\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547737.png\" alt=\"image-20221117145749766\"></p>\n<p>如果直接调用method方法,那么就必须把static给补上</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547102.png\" alt=\"image-20221117150418016\"></p>\n<p>先强化造对象的过程再说别的</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547778.png\" alt=\"image-20221117150645874\"></p>\n<p>虽然说里边是个方法,但是实际上返回值是变量,也就是最终结果是变量,所以可以放</p>\n<h3 id=\"属性与形参\"><a href=\"#属性与形参\" class=\"headerlink\" title=\"属性与形参\"></a>属性与形参</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547084.png\" alt=\"image-20221117152023865\"></p>\n<p>这个代码已经说明的很清楚了</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547621.png\" alt=\"image-20221117152148621\"></p>\n<p>形参的调用</p>\n<h3 id=\"重点好题⭐\"><a href=\"#重点好题⭐\" class=\"headerlink\" title=\"重点好题⭐\"></a>重点好题⭐</h3><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547603.png\" alt=\"image-20221117152920791\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547877.png\" alt=\"image-20221117153215395\"></p>\n<p><strong>也就是说,数组里面啥都能装,可以装数字型,也能把对象给装进去.</strong></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547890.png\" alt=\"image-20221117154558648\"></p>\n<p>换句话说这个数组的类是student类,的</p>\n<p>具体原理参见柞与堆</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547105.png\" alt=\"image-20221117153528207\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547563.png\" alt=\"image-20221117153642066\"></p>\n<p>还可以利用类里面的方法进行编辑</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281547499.png\" alt=\"image-20221117154213954\"></p>\n<p>数组之间的使用必须是同类型的.</p>\n"},{"title":"面向对象","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n![image-20221117170836337](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548133.png)\n\n## 万事万物皆对象\n\n![image-20221117171914481](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548905.png)\n\n## 对象数组的内存结构\n\n![image-20221117173103843](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548264.png)\n\n## 匿名对象的使用\n\n![image-20221117184719227](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548416.png)\n\n直接这样打印打印出来的是地址值\n\n  ![image-20221117184937277](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548902.png)\n\n1.这样写首先是调用对象的属性或方法\n\n2.这是匿名对象的创建与调用,正常的是这样的![image-20221117185158657](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548411.png)\n\n这new出来的对象是两个不同的对象\n\n```\n匿名对象只能调用一次,也就是一次性的\n\n```\n\n![image-20221117185843410](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548544.png)\n\n### 自定义数组的工具类\n\n```\n给类命名的时候不要跟类库里的类重名\n```\n\n## 方法重载\n\n同一个类中,允许存在一个以上的同名方法,只要他们的参数个数或者参数类型不同即可\n\n![image-20221130101446152](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548006.png)\n\n如彼此名虽同,但是具体不同,这些这些便是方法的重载\n\n![image-20221130104020210](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548152.png)\n\n![image-20221130104211527](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548800.png)\n\n他和自动类型转换也有关\n\n## 可变个数的形参\n\n![image-20221130104412847](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548834.png)\n\n![image-20221202080801825](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548600.png)\n\n![image-20221202081350342](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549472.png)\n\n此情况下优先考虑常规单个\n\n可变参数参数个数也可以是0个\n\n\n\n编译器会认为这两个参数是相同的\n\n![image-20221202081635222](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549755.png)\n\n![image-20221202081843677](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549148.png)\n\n![image-20221202081851151](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549937.png)\n\n实际上这就是一个数组,只不过写法简化了\n\n![image-20221202081926884](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549422.png)\n\n若是想直接传入数组也行\n\n![image-20221202082209252](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549277.png)\n\n可变形参必须声明在最后一个\n\n## 方法参数的值传递机制\n\n- 变量的赋值\n\n基本类型变量不存在这些问题\n\n引用数据类型赋值指向同一个堆\n\n![image-20221202090314274](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549367.png)\n\n- 基本数据类型的值传递\n\n![image-20221202092456844](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549602.png)","source":"_posts/面向对象2.md","raw":"---\ntitle: 面向对象\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n![image-20221117170836337](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548133.png)\n\n## 万事万物皆对象\n\n![image-20221117171914481](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548905.png)\n\n## 对象数组的内存结构\n\n![image-20221117173103843](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548264.png)\n\n## 匿名对象的使用\n\n![image-20221117184719227](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548416.png)\n\n直接这样打印打印出来的是地址值\n\n  ![image-20221117184937277](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548902.png)\n\n1.这样写首先是调用对象的属性或方法\n\n2.这是匿名对象的创建与调用,正常的是这样的![image-20221117185158657](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548411.png)\n\n这new出来的对象是两个不同的对象\n\n```\n匿名对象只能调用一次,也就是一次性的\n\n```\n\n![image-20221117185843410](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548544.png)\n\n### 自定义数组的工具类\n\n```\n给类命名的时候不要跟类库里的类重名\n```\n\n## 方法重载\n\n同一个类中,允许存在一个以上的同名方法,只要他们的参数个数或者参数类型不同即可\n\n![image-20221130101446152](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548006.png)\n\n如彼此名虽同,但是具体不同,这些这些便是方法的重载\n\n![image-20221130104020210](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548152.png)\n\n![image-20221130104211527](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548800.png)\n\n他和自动类型转换也有关\n\n## 可变个数的形参\n\n![image-20221130104412847](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548834.png)\n\n![image-20221202080801825](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548600.png)\n\n![image-20221202081350342](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549472.png)\n\n此情况下优先考虑常规单个\n\n可变参数参数个数也可以是0个\n\n\n\n编译器会认为这两个参数是相同的\n\n![image-20221202081635222](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549755.png)\n\n![image-20221202081843677](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549148.png)\n\n![image-20221202081851151](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549937.png)\n\n实际上这就是一个数组,只不过写法简化了\n\n![image-20221202081926884](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549422.png)\n\n若是想直接传入数组也行\n\n![image-20221202082209252](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549277.png)\n\n可变形参必须声明在最后一个\n\n## 方法参数的值传递机制\n\n- 变量的赋值\n\n基本类型变量不存在这些问题\n\n引用数据类型赋值指向同一个堆\n\n![image-20221202090314274](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549367.png)\n\n- 基本数据类型的值传递\n\n![image-20221202092456844](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549602.png)","slug":"面向对象2","published":1,"updated":"2023-01-28T09:30:18.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6f000n70937f03hur4","content":"<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548133.png\" alt=\"image-20221117170836337\"></p>\n<h2 id=\"万事万物皆对象\"><a href=\"#万事万物皆对象\" class=\"headerlink\" title=\"万事万物皆对象\"></a>万事万物皆对象</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548905.png\" alt=\"image-20221117171914481\"></p>\n<h2 id=\"对象数组的内存结构\"><a href=\"#对象数组的内存结构\" class=\"headerlink\" title=\"对象数组的内存结构\"></a>对象数组的内存结构</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548264.png\" alt=\"image-20221117173103843\"></p>\n<h2 id=\"匿名对象的使用\"><a href=\"#匿名对象的使用\" class=\"headerlink\" title=\"匿名对象的使用\"></a>匿名对象的使用</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548416.png\" alt=\"image-20221117184719227\"></p>\n<p>直接这样打印打印出来的是地址值</p>\n<p>  <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548902.png\" alt=\"image-20221117184937277\"></p>\n<p>1.这样写首先是调用对象的属性或方法</p>\n<p>2.这是匿名对象的创建与调用,正常的是这样的<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548411.png\" alt=\"image-20221117185158657\"></p>\n<p>这new出来的对象是两个不同的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">匿名对象只能调用一次,也就是一次性的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548544.png\" alt=\"image-20221117185843410\"></p>\n<h3 id=\"自定义数组的工具类\"><a href=\"#自定义数组的工具类\" class=\"headerlink\" title=\"自定义数组的工具类\"></a>自定义数组的工具类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给类命名的时候不要跟类库里的类重名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>同一个类中,允许存在一个以上的同名方法,只要他们的参数个数或者参数类型不同即可</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548006.png\" alt=\"image-20221130101446152\"></p>\n<p>如彼此名虽同,但是具体不同,这些这些便是方法的重载</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548152.png\" alt=\"image-20221130104020210\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548800.png\" alt=\"image-20221130104211527\"></p>\n<p>他和自动类型转换也有关</p>\n<h2 id=\"可变个数的形参\"><a href=\"#可变个数的形参\" class=\"headerlink\" title=\"可变个数的形参\"></a>可变个数的形参</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548834.png\" alt=\"image-20221130104412847\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548600.png\" alt=\"image-20221202080801825\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549472.png\" alt=\"image-20221202081350342\"></p>\n<p>此情况下优先考虑常规单个</p>\n<p>可变参数参数个数也可以是0个</p>\n<p>编译器会认为这两个参数是相同的</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549755.png\" alt=\"image-20221202081635222\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549148.png\" alt=\"image-20221202081843677\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549937.png\" alt=\"image-20221202081851151\"></p>\n<p>实际上这就是一个数组,只不过写法简化了</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549422.png\" alt=\"image-20221202081926884\"></p>\n<p>若是想直接传入数组也行</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549277.png\" alt=\"image-20221202082209252\"></p>\n<p>可变形参必须声明在最后一个</p>\n<h2 id=\"方法参数的值传递机制\"><a href=\"#方法参数的值传递机制\" class=\"headerlink\" title=\"方法参数的值传递机制\"></a>方法参数的值传递机制</h2><ul>\n<li>变量的赋值</li>\n</ul>\n<p>基本类型变量不存在这些问题</p>\n<p>引用数据类型赋值指向同一个堆</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549367.png\" alt=\"image-20221202090314274\"></p>\n<ul>\n<li>基本数据类型的值传递</li>\n</ul>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549602.png\" alt=\"image-20221202092456844\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548133.png\" alt=\"image-20221117170836337\"></p>\n<h2 id=\"万事万物皆对象\"><a href=\"#万事万物皆对象\" class=\"headerlink\" title=\"万事万物皆对象\"></a>万事万物皆对象</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548905.png\" alt=\"image-20221117171914481\"></p>\n<h2 id=\"对象数组的内存结构\"><a href=\"#对象数组的内存结构\" class=\"headerlink\" title=\"对象数组的内存结构\"></a>对象数组的内存结构</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548264.png\" alt=\"image-20221117173103843\"></p>\n<h2 id=\"匿名对象的使用\"><a href=\"#匿名对象的使用\" class=\"headerlink\" title=\"匿名对象的使用\"></a>匿名对象的使用</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548416.png\" alt=\"image-20221117184719227\"></p>\n<p>直接这样打印打印出来的是地址值</p>\n<p>  <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548902.png\" alt=\"image-20221117184937277\"></p>\n<p>1.这样写首先是调用对象的属性或方法</p>\n<p>2.这是匿名对象的创建与调用,正常的是这样的<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548411.png\" alt=\"image-20221117185158657\"></p>\n<p>这new出来的对象是两个不同的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">匿名对象只能调用一次,也就是一次性的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548544.png\" alt=\"image-20221117185843410\"></p>\n<h3 id=\"自定义数组的工具类\"><a href=\"#自定义数组的工具类\" class=\"headerlink\" title=\"自定义数组的工具类\"></a>自定义数组的工具类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给类命名的时候不要跟类库里的类重名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>同一个类中,允许存在一个以上的同名方法,只要他们的参数个数或者参数类型不同即可</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548006.png\" alt=\"image-20221130101446152\"></p>\n<p>如彼此名虽同,但是具体不同,这些这些便是方法的重载</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548152.png\" alt=\"image-20221130104020210\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548800.png\" alt=\"image-20221130104211527\"></p>\n<p>他和自动类型转换也有关</p>\n<h2 id=\"可变个数的形参\"><a href=\"#可变个数的形参\" class=\"headerlink\" title=\"可变个数的形参\"></a>可变个数的形参</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548834.png\" alt=\"image-20221130104412847\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281548600.png\" alt=\"image-20221202080801825\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549472.png\" alt=\"image-20221202081350342\"></p>\n<p>此情况下优先考虑常规单个</p>\n<p>可变参数参数个数也可以是0个</p>\n<p>编译器会认为这两个参数是相同的</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549755.png\" alt=\"image-20221202081635222\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549148.png\" alt=\"image-20221202081843677\"></p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549937.png\" alt=\"image-20221202081851151\"></p>\n<p>实际上这就是一个数组,只不过写法简化了</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549422.png\" alt=\"image-20221202081926884\"></p>\n<p>若是想直接传入数组也行</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549277.png\" alt=\"image-20221202082209252\"></p>\n<p>可变形参必须声明在最后一个</p>\n<h2 id=\"方法参数的值传递机制\"><a href=\"#方法参数的值传递机制\" class=\"headerlink\" title=\"方法参数的值传递机制\"></a>方法参数的值传递机制</h2><ul>\n<li>变量的赋值</li>\n</ul>\n<p>基本类型变量不存在这些问题</p>\n<p>引用数据类型赋值指向同一个堆</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549367.png\" alt=\"image-20221202090314274\"></p>\n<ul>\n<li>基本数据类型的值传递</li>\n</ul>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281549602.png\" alt=\"image-20221202092456844\"></p>\n"},{"title":"程序流程控制","date":"2017-05-26T04:12:57.000Z","_content":"\n\n\n## 程序流程控制的几大结构\n\n- 顺序结构\n\n- 分支结构\n\n- 循环结构\n\n  ## 分支结构\n\n  ![image-20221014082333576](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281539392.png)![image-20221014082344584](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281540328.png)\n\n​\t![image-20221014082414516](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543615.png)\n\n## 使用scaner从键盘获取数据\n\n![image-20221014083258172](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543217.png)\n\n对于char型变量,scaner没有获取的方法\n\n程序是顺序执行的,如三选一,如果第一个分支行被指令被执行,那么后面的就不会再执行了![image-20221014093819429](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543325.png)\n\n#### if else 结构可以互相嵌套\n\n但是层数最好不要超过3层\n\n一是应为你自己绕不过来\n\n二是 因为可读性太差\n\nif语句如果只有一行那么大括号可以省略,但是最好不要这样做,因为这样经常会出错(比如回头检查时要补一行,就很麻烦)\n\n![image-20221016200321392](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543956.png)\n\n \n\n这种情况下else是就近原则\n\n","source":"_posts/程序流程控制.md","raw":"---\ntitle: 程序流程控制\ndate: 2017-05-26 12:12:57\ncategories: java基础\ntags:\n- java\n---\n\n\n\n## 程序流程控制的几大结构\n\n- 顺序结构\n\n- 分支结构\n\n- 循环结构\n\n  ## 分支结构\n\n  ![image-20221014082333576](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281539392.png)![image-20221014082344584](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281540328.png)\n\n​\t![image-20221014082414516](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543615.png)\n\n## 使用scaner从键盘获取数据\n\n![image-20221014083258172](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543217.png)\n\n对于char型变量,scaner没有获取的方法\n\n程序是顺序执行的,如三选一,如果第一个分支行被指令被执行,那么后面的就不会再执行了![image-20221014093819429](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543325.png)\n\n#### if else 结构可以互相嵌套\n\n但是层数最好不要超过3层\n\n一是应为你自己绕不过来\n\n二是 因为可读性太差\n\nif语句如果只有一行那么大括号可以省略,但是最好不要这样做,因为这样经常会出错(比如回头检查时要补一行,就很麻烦)\n\n![image-20221016200321392](https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543956.png)\n\n \n\n这种情况下else是就近原则\n\n","slug":"程序流程控制","published":1,"updated":"2023-01-28T09:27:08.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfurb6o001d70934f3aeea2","content":"<h2 id=\"程序流程控制的几大结构\"><a href=\"#程序流程控制的几大结构\" class=\"headerlink\" title=\"程序流程控制的几大结构\"></a>程序流程控制的几大结构</h2><ul>\n<li><p>顺序结构</p>\n</li>\n<li><p>分支结构</p>\n</li>\n<li><p>循环结构</p>\n<h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281539392.png\" alt=\"image-20221014082333576\"><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281540328.png\" alt=\"image-20221014082344584\"></p>\n</li>\n</ul>\n<p>​    <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543615.png\" alt=\"image-20221014082414516\"></p>\n<h2 id=\"使用scaner从键盘获取数据\"><a href=\"#使用scaner从键盘获取数据\" class=\"headerlink\" title=\"使用scaner从键盘获取数据\"></a>使用scaner从键盘获取数据</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543217.png\" alt=\"image-20221014083258172\"></p>\n<p>对于char型变量,scaner没有获取的方法</p>\n<p>程序是顺序执行的,如三选一,如果第一个分支行被指令被执行,那么后面的就不会再执行了<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543325.png\" alt=\"image-20221014093819429\"></p>\n<h4 id=\"if-else-结构可以互相嵌套\"><a href=\"#if-else-结构可以互相嵌套\" class=\"headerlink\" title=\"if else 结构可以互相嵌套\"></a>if else 结构可以互相嵌套</h4><p>但是层数最好不要超过3层</p>\n<p>一是应为你自己绕不过来</p>\n<p>二是 因为可读性太差</p>\n<p>if语句如果只有一行那么大括号可以省略,但是最好不要这样做,因为这样经常会出错(比如回头检查时要补一行,就很麻烦)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543956.png\" alt=\"image-20221016200321392\"></p>\n<p>这种情况下else是就近原则</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"程序流程控制的几大结构\"><a href=\"#程序流程控制的几大结构\" class=\"headerlink\" title=\"程序流程控制的几大结构\"></a>程序流程控制的几大结构</h2><ul>\n<li><p>顺序结构</p>\n</li>\n<li><p>分支结构</p>\n</li>\n<li><p>循环结构</p>\n<h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281539392.png\" alt=\"image-20221014082333576\"><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281540328.png\" alt=\"image-20221014082344584\"></p>\n</li>\n</ul>\n<p>​    <img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543615.png\" alt=\"image-20221014082414516\"></p>\n<h2 id=\"使用scaner从键盘获取数据\"><a href=\"#使用scaner从键盘获取数据\" class=\"headerlink\" title=\"使用scaner从键盘获取数据\"></a>使用scaner从键盘获取数据</h2><p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543217.png\" alt=\"image-20221014083258172\"></p>\n<p>对于char型变量,scaner没有获取的方法</p>\n<p>程序是顺序执行的,如三选一,如果第一个分支行被指令被执行,那么后面的就不会再执行了<img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543325.png\" alt=\"image-20221014093819429\"></p>\n<h4 id=\"if-else-结构可以互相嵌套\"><a href=\"#if-else-结构可以互相嵌套\" class=\"headerlink\" title=\"if else 结构可以互相嵌套\"></a>if else 结构可以互相嵌套</h4><p>但是层数最好不要超过3层</p>\n<p>一是应为你自己绕不过来</p>\n<p>二是 因为可读性太差</p>\n<p>if语句如果只有一行那么大括号可以省略,但是最好不要这样做,因为这样经常会出错(比如回头检查时要补一行,就很麻烦)</p>\n<p><img src=\"https://markdown-langxecho-save.oss-cn-hangzhou.aliyuncs.com/img/202301281543956.png\" alt=\"image-20221016200321392\"></p>\n<p>这种情况下else是就近原则</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldfurb65000170930l1gciz4","category_id":"cldfurb6900047093422sc3xt","_id":"cldfurb6d000f70938zta27nk"},{"post_id":"cldfurb6800037093a54t8eo0","category_id":"cldfurb6c000b7093322g7k1l","_id":"cldfurb6f000l7093ga6s53g3"},{"post_id":"cldfurb6d000h709334ndazk9","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6g000q70933v5w8g6x"},{"post_id":"cldfurb6a00067093h5eo6pva","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6h000t70939dl002bc"},{"post_id":"cldfurb6e000j7093afjwg55c","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6h000w709342pda2nq"},{"post_id":"cldfurb6f000n70937f03hur4","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6h000z7093d13a0fy8"},{"post_id":"cldfurb6b0009709339j1122b","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6i001270935i3ea0r4"},{"post_id":"cldfurb6b000a70934hlj4wgm","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6i00157093gfrd5bxl"},{"post_id":"cldfurb6c000c70931mlk1dkv","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6i00187093dlhlhw0z"},{"post_id":"cldfurb6d000e7093aprq4sbr","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6j001b7093atxl5yyl"},{"post_id":"cldfurb6o001d70934f3aeea2","category_id":"cldfurb6d000g7093d6wffq0c","_id":"cldfurb6p001f70932sdo4pau"}],"PostTag":[{"post_id":"cldfurb6800037093a54t8eo0","tag_id":"cldfurb6a00077093cxvwai6s","_id":"cldfurb6e000k70938dbt9pwv"},{"post_id":"cldfurb6800037093a54t8eo0","tag_id":"cldfurb6d000d7093fgjl97cp","_id":"cldfurb6g000o7093fisq7aj3"},{"post_id":"cldfurb6e000j7093afjwg55c","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6g000r70939s6v21jn"},{"post_id":"cldfurb6a00067093h5eo6pva","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6h000u70934exdgppo"},{"post_id":"cldfurb6f000n70937f03hur4","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6h000x70935x53bnws"},{"post_id":"cldfurb6b0009709339j1122b","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6h00107093fgbn6fg3"},{"post_id":"cldfurb6b000a70934hlj4wgm","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6i0013709353pth4z2"},{"post_id":"cldfurb6c000c70931mlk1dkv","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6i00177093bw7r9809"},{"post_id":"cldfurb6d000e7093aprq4sbr","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6j001a70937lrt7e17"},{"post_id":"cldfurb6d000h709334ndazk9","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6j001c70931jr5gfr0"},{"post_id":"cldfurb6o001d70934f3aeea2","tag_id":"cldfurb6e000i709354xcbn3i","_id":"cldfurb6p001e70933ijs0a7f"}],"Tag":[{"name":"ncie","_id":"cldfurb6a00077093cxvwai6s"},{"name":"yoku","_id":"cldfurb6d000d7093fgjl97cp"},{"name":"java","_id":"cldfurb6e000i709354xcbn3i"}]}}